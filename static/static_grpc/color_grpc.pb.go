// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: color.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ColorServiceClient is the client API for ColorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ColorServiceClient interface {
	AverageColor(ctx context.Context, in *Url, opts ...grpc.CallOption) (*Color, error)
}

type colorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewColorServiceClient(cc grpc.ClientConnInterface) ColorServiceClient {
	return &colorServiceClient{cc}
}

func (c *colorServiceClient) AverageColor(ctx context.Context, in *Url, opts ...grpc.CallOption) (*Color, error) {
	out := new(Color)
	err := c.cc.Invoke(ctx, "/static.ColorService/AverageColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColorServiceServer is the server API for ColorService service.
// All implementations must embed UnimplementedColorServiceServer
// for forward compatibility
type ColorServiceServer interface {
	AverageColor(context.Context, *Url) (*Color, error)
	mustEmbedUnimplementedColorServiceServer()
}

// UnimplementedColorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedColorServiceServer struct {
}

func (UnimplementedColorServiceServer) AverageColor(context.Context, *Url) (*Color, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AverageColor not implemented")
}
func (UnimplementedColorServiceServer) mustEmbedUnimplementedColorServiceServer() {}

// UnsafeColorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ColorServiceServer will
// result in compilation errors.
type UnsafeColorServiceServer interface {
	mustEmbedUnimplementedColorServiceServer()
}

func RegisterColorServiceServer(s grpc.ServiceRegistrar, srv ColorServiceServer) {
	s.RegisterService(&ColorService_ServiceDesc, srv)
}

func _ColorService_AverageColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Url)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColorServiceServer).AverageColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/static.ColorService/AverageColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColorServiceServer).AverageColor(ctx, req.(*Url))
	}
	return interceptor(ctx, in, info, handler)
}

// ColorService_ServiceDesc is the grpc.ServiceDesc for ColorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ColorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "static.ColorService",
	HandlerType: (*ColorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AverageColor",
			Handler:    _ColorService_AverageColor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "color.proto",
}
