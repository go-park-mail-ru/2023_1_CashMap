// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5a72dc82DecodeDepecheInternalDeliveryDto(in *jlexer.Lexer, out *UpdateAttachments) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "deleted":
			if in.IsNull() {
				in.Skip()
				out.Deleted = nil
			} else {
				in.Delim('[')
				if out.Deleted == nil {
					if !in.IsDelim(']') {
						out.Deleted = make([]string, 0, 4)
					} else {
						out.Deleted = []string{}
					}
				} else {
					out.Deleted = (out.Deleted)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Deleted = append(out.Deleted, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "added":
			if in.IsNull() {
				in.Skip()
				out.Added = nil
			} else {
				in.Delim('[')
				if out.Added == nil {
					if !in.IsDelim(']') {
						out.Added = make([]string, 0, 4)
					} else {
						out.Added = []string{}
					}
				} else {
					out.Added = (out.Added)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Added = append(out.Added, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDepecheInternalDeliveryDto(out *jwriter.Writer, in UpdateAttachments) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"deleted\":"
		out.RawString(prefix[1:])
		if in.Deleted == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Deleted {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"added\":"
		out.RawString(prefix)
		if in.Added == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Added {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateAttachments) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeDepecheInternalDeliveryDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateAttachments) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeDepecheInternalDeliveryDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateAttachments) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeDepecheInternalDeliveryDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateAttachments) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeDepecheInternalDeliveryDto(l, v)
}
func easyjson5a72dc82DecodeDepecheInternalDeliveryDto1(in *jlexer.Lexer, out *PostsGetByLink) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "community_link":
			if in.IsNull() {
				in.Skip()
				out.CommunityLink = nil
			} else {
				if out.CommunityLink == nil {
					out.CommunityLink = new(string)
				}
				*out.CommunityLink = string(in.String())
			}
		case "owner_link":
			if in.IsNull() {
				in.Skip()
				out.OwnerLink = nil
			} else {
				if out.OwnerLink == nil {
					out.OwnerLink = new(string)
				}
				*out.OwnerLink = string(in.String())
			}
		case "batch_size":
			out.BatchSize = uint(in.Uint())
		case "last_post_date":
			out.LastPostDate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDepecheInternalDeliveryDto1(out *jwriter.Writer, in PostsGetByLink) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"community_link\":"
		out.RawString(prefix[1:])
		if in.CommunityLink == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.CommunityLink))
		}
	}
	{
		const prefix string = ",\"owner_link\":"
		out.RawString(prefix)
		if in.OwnerLink == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.OwnerLink))
		}
	}
	{
		const prefix string = ",\"batch_size\":"
		out.RawString(prefix)
		out.Uint(uint(in.BatchSize))
	}
	{
		const prefix string = ",\"last_post_date\":"
		out.RawString(prefix)
		out.String(string(in.LastPostDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostsGetByLink) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeDepecheInternalDeliveryDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostsGetByLink) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeDepecheInternalDeliveryDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostsGetByLink) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeDepecheInternalDeliveryDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostsGetByLink) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeDepecheInternalDeliveryDto1(l, v)
}
func easyjson5a72dc82DecodeDepecheInternalDeliveryDto2(in *jlexer.Lexer, out *PostUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post_id":
			if in.IsNull() {
				in.Skip()
				out.PostID = nil
			} else {
				if out.PostID == nil {
					out.PostID = new(uint)
				}
				*out.PostID = uint(in.Uint())
			}
		case "show_author":
			if in.IsNull() {
				in.Skip()
				out.ShouldShowAuthor = nil
			} else {
				if out.ShouldShowAuthor == nil {
					out.ShouldShowAuthor = new(bool)
				}
				*out.ShouldShowAuthor = bool(in.Bool())
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				if out.Attachments == nil {
					out.Attachments = new(UpdateAttachments)
				}
				(*out.Attachments).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDepecheInternalDeliveryDto2(out *jwriter.Writer, in PostUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post_id\":"
		out.RawString(prefix[1:])
		if in.PostID == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.PostID))
		}
	}
	{
		const prefix string = ",\"show_author\":"
		out.RawString(prefix)
		if in.ShouldShowAuthor == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.ShouldShowAuthor))
		}
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		if in.Text == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Text))
		}
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil {
			out.RawString("null")
		} else {
			(*in.Attachments).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeDepecheInternalDeliveryDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeDepecheInternalDeliveryDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeDepecheInternalDeliveryDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeDepecheInternalDeliveryDto2(l, v)
}
func easyjson5a72dc82DecodeDepecheInternalDeliveryDto3(in *jlexer.Lexer, out *PostGetByID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post_id":
			out.PostID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDepecheInternalDeliveryDto3(out *jwriter.Writer, in PostGetByID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.PostID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostGetByID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeDepecheInternalDeliveryDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostGetByID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeDepecheInternalDeliveryDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostGetByID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeDepecheInternalDeliveryDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostGetByID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeDepecheInternalDeliveryDto3(l, v)
}
func easyjson5a72dc82DecodeDepecheInternalDeliveryDto4(in *jlexer.Lexer, out *PostDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post_id":
			if in.IsNull() {
				in.Skip()
				out.PostID = nil
			} else {
				if out.PostID == nil {
					out.PostID = new(uint)
				}
				*out.PostID = uint(in.Uint())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDepecheInternalDeliveryDto4(out *jwriter.Writer, in PostDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post_id\":"
		out.RawString(prefix[1:])
		if in.PostID == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.PostID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeDepecheInternalDeliveryDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeDepecheInternalDeliveryDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeDepecheInternalDeliveryDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeDepecheInternalDeliveryDto4(l, v)
}
func easyjson5a72dc82DecodeDepecheInternalDeliveryDto5(in *jlexer.Lexer, out *PostCreate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "community_link":
			if in.IsNull() {
				in.Skip()
				out.CommunityLink = nil
			} else {
				if out.CommunityLink == nil {
					out.CommunityLink = new(string)
				}
				*out.CommunityLink = string(in.String())
			}
		case "owner_link":
			if in.IsNull() {
				in.Skip()
				out.OwnerLink = nil
			} else {
				if out.OwnerLink == nil {
					out.OwnerLink = new(string)
				}
				*out.OwnerLink = string(in.String())
			}
		case "author_link":
			out.UserLink = string(in.String())
		case "show_author":
			out.ShouldShowAuthor = bool(in.Bool())
		case "text":
			out.Text = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]string, 0, 4)
					} else {
						out.Attachments = []string{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Attachments = append(out.Attachments, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDepecheInternalDeliveryDto5(out *jwriter.Writer, in PostCreate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"community_link\":"
		out.RawString(prefix[1:])
		if in.CommunityLink == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.CommunityLink))
		}
	}
	{
		const prefix string = ",\"owner_link\":"
		out.RawString(prefix)
		if in.OwnerLink == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.OwnerLink))
		}
	}
	{
		const prefix string = ",\"author_link\":"
		out.RawString(prefix)
		out.String(string(in.UserLink))
	}
	{
		const prefix string = ",\"show_author\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShouldShowAuthor))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Attachments {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostCreate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeDepecheInternalDeliveryDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostCreate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeDepecheInternalDeliveryDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostCreate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeDepecheInternalDeliveryDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostCreate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeDepecheInternalDeliveryDto5(l, v)
}
func easyjson5a72dc82DecodeDepecheInternalDeliveryDto6(in *jlexer.Lexer, out *LikeDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post_id":
			if in.IsNull() {
				in.Skip()
				out.PostID = nil
			} else {
				if out.PostID == nil {
					out.PostID = new(uint)
				}
				*out.PostID = uint(in.Uint())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDepecheInternalDeliveryDto6(out *jwriter.Writer, in LikeDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post_id\":"
		out.RawString(prefix[1:])
		if in.PostID == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.PostID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LikeDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeDepecheInternalDeliveryDto6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LikeDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeDepecheInternalDeliveryDto6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LikeDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeDepecheInternalDeliveryDto6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LikeDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeDepecheInternalDeliveryDto6(l, v)
}
