// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeDepecheInternalDeliveryDto(in *jlexer.Lexer, out *Subscribes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_link":
			out.Link = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDepecheInternalDeliveryDto(out *jwriter.Writer, in Subscribes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_link\":"
		out.RawString(prefix[1:])
		out.String(string(in.Link))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Subscribes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeDepecheInternalDeliveryDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subscribes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeDepecheInternalDeliveryDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subscribes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeDepecheInternalDeliveryDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subscribes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeDepecheInternalDeliveryDto(l, v)
}
func easyjsonD2b7633eDecodeDepecheInternalDeliveryDto1(in *jlexer.Lexer, out *SignUp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDepecheInternalDeliveryDto1(out *jwriter.Writer, in SignUp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignUp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeDepecheInternalDeliveryDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignUp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeDepecheInternalDeliveryDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignUp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeDepecheInternalDeliveryDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignUp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeDepecheInternalDeliveryDto1(l, v)
}
func easyjsonD2b7633eDecodeDepecheInternalDeliveryDto2(in *jlexer.Lexer, out *SignIn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDepecheInternalDeliveryDto2(out *jwriter.Writer, in SignIn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignIn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeDepecheInternalDeliveryDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignIn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeDepecheInternalDeliveryDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignIn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeDepecheInternalDeliveryDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignIn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeDepecheInternalDeliveryDto2(l, v)
}
func easyjsonD2b7633eDecodeDepecheInternalDeliveryDto3(in *jlexer.Lexer, out *Profile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_link":
			out.Link = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "avatar_url":
			out.Avatar = string(in.String())
		case "avg_avatar_color":
			out.AvgColor = string(in.String())
		case "sex":
			out.Sex = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "bio":
			out.Bio = string(in.String())
		case "birthday":
			out.BirthDay = string(in.String())
		case "date_joined":
			out.DateJoined = string(in.String())
		case "last_active":
			out.LastActive = string(in.String())
		case "private":
			out.Private = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDepecheInternalDeliveryDto3(out *jwriter.Writer, in Profile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_link\":"
		out.RawString(prefix[1:])
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"avg_avatar_color\":"
		out.RawString(prefix)
		out.String(string(in.AvgColor))
	}
	{
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		out.String(string(in.Sex))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"bio\":"
		out.RawString(prefix)
		out.String(string(in.Bio))
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(in.BirthDay))
	}
	{
		const prefix string = ",\"date_joined\":"
		out.RawString(prefix)
		out.String(string(in.DateJoined))
	}
	{
		const prefix string = ",\"last_active\":"
		out.RawString(prefix)
		out.String(string(in.LastActive))
	}
	{
		const prefix string = ",\"private\":"
		out.RawString(prefix)
		out.Bool(bool(in.Private))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Profile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeDepecheInternalDeliveryDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Profile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeDepecheInternalDeliveryDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Profile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeDepecheInternalDeliveryDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Profile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeDepecheInternalDeliveryDto3(l, v)
}
func easyjsonD2b7633eDecodeDepecheInternalDeliveryDto4(in *jlexer.Lexer, out *GlobalSearchDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SearchQuery":
			if in.IsNull() {
				in.Skip()
				out.SearchQuery = nil
			} else {
				if out.SearchQuery == nil {
					out.SearchQuery = new(string)
				}
				*out.SearchQuery = string(in.String())
			}
		case "BatchSize":
			if in.IsNull() {
				in.Skip()
				out.BatchSize = nil
			} else {
				if out.BatchSize == nil {
					out.BatchSize = new(uint)
				}
				*out.BatchSize = uint(in.Uint())
			}
		case "Offset":
			if in.IsNull() {
				in.Skip()
				out.Offset = nil
			} else {
				if out.Offset == nil {
					out.Offset = new(uint)
				}
				*out.Offset = uint(in.Uint())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDepecheInternalDeliveryDto4(out *jwriter.Writer, in GlobalSearchDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SearchQuery\":"
		out.RawString(prefix[1:])
		if in.SearchQuery == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.SearchQuery))
		}
	}
	{
		const prefix string = ",\"BatchSize\":"
		out.RawString(prefix)
		if in.BatchSize == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.BatchSize))
		}
	}
	{
		const prefix string = ",\"Offset\":"
		out.RawString(prefix)
		if in.Offset == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.Offset))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalSearchDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeDepecheInternalDeliveryDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalSearchDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeDepecheInternalDeliveryDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalSearchDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeDepecheInternalDeliveryDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalSearchDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeDepecheInternalDeliveryDto4(l, v)
}
func easyjsonD2b7633eDecodeDepecheInternalDeliveryDto5(in *jlexer.Lexer, out *EditProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		case "password":
			if in.IsNull() {
				in.Skip()
				out.NewPassword = nil
			} else {
				if out.NewPassword == nil {
					out.NewPassword = new(string)
				}
				*out.NewPassword = string(in.String())
			}
		case "prev_pass":
			if in.IsNull() {
				in.Skip()
				out.PreviousPassword = nil
			} else {
				if out.PreviousPassword == nil {
					out.PreviousPassword = new(string)
				}
				*out.PreviousPassword = string(in.String())
			}
		case "first_name":
			if in.IsNull() {
				in.Skip()
				out.FirstName = nil
			} else {
				if out.FirstName == nil {
					out.FirstName = new(string)
				}
				*out.FirstName = string(in.String())
			}
		case "last_name":
			if in.IsNull() {
				in.Skip()
				out.LastName = nil
			} else {
				if out.LastName == nil {
					out.LastName = new(string)
				}
				*out.LastName = string(in.String())
			}
		case "avatar_url":
			if in.IsNull() {
				in.Skip()
				out.Avatar = nil
			} else {
				if out.Avatar == nil {
					out.Avatar = new(string)
				}
				*out.Avatar = string(in.String())
			}
		case "user_link":
			if in.IsNull() {
				in.Skip()
				out.Link = nil
			} else {
				if out.Link == nil {
					out.Link = new(string)
				}
				*out.Link = string(in.String())
			}
		case "sex":
			if in.IsNull() {
				in.Skip()
				out.Sex = nil
			} else {
				if out.Sex == nil {
					out.Sex = new(string)
				}
				*out.Sex = string(in.String())
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(string)
				}
				*out.Status = string(in.String())
			}
		case "bio":
			if in.IsNull() {
				in.Skip()
				out.Bio = nil
			} else {
				if out.Bio == nil {
					out.Bio = new(string)
				}
				*out.Bio = string(in.String())
			}
		case "birthday":
			if in.IsNull() {
				in.Skip()
				out.Birthday = nil
			} else {
				if out.Birthday == nil {
					out.Birthday = new(string)
				}
				*out.Birthday = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeDepecheInternalDeliveryDto5(out *jwriter.Writer, in EditProfile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		if in.Email == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Email))
		}
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		if in.NewPassword == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.NewPassword))
		}
	}
	{
		const prefix string = ",\"prev_pass\":"
		out.RawString(prefix)
		if in.PreviousPassword == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PreviousPassword))
		}
	}
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		if in.FirstName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FirstName))
		}
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		if in.LastName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.LastName))
		}
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		if in.Avatar == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Avatar))
		}
	}
	{
		const prefix string = ",\"user_link\":"
		out.RawString(prefix)
		if in.Link == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Link))
		}
	}
	{
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		if in.Sex == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Sex))
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		if in.Status == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Status))
		}
	}
	{
		const prefix string = ",\"bio\":"
		out.RawString(prefix)
		if in.Bio == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Bio))
		}
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		if in.Birthday == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Birthday))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditProfile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeDepecheInternalDeliveryDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditProfile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeDepecheInternalDeliveryDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditProfile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeDepecheInternalDeliveryDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditProfile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeDepecheInternalDeliveryDto5(l, v)
}
