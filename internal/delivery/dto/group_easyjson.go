// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1c045807DecodeDepecheInternalDeliveryDto(in *jlexer.Lexer, out *UpdateGroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "group_info":
			if in.IsNull() {
				in.Skip()
				out.Info = nil
			} else {
				if out.Info == nil {
					out.Info = new(string)
				}
				*out.Info = string(in.String())
			}
		case "link":
			if in.IsNull() {
				in.Skip()
				out.Link = nil
			} else {
				if out.Link == nil {
					out.Link = new(string)
				}
				*out.Link = string(in.String())
			}
		case "avatar_url":
			if in.IsNull() {
				in.Skip()
				out.Avatar = nil
			} else {
				if out.Avatar == nil {
					out.Avatar = new(string)
				}
				*out.Avatar = string(in.String())
			}
		case "privacy":
			if in.IsNull() {
				in.Skip()
				out.Privacy = nil
			} else {
				if out.Privacy == nil {
					out.Privacy = new(string)
				}
				*out.Privacy = string(in.String())
			}
		case "hide_owner":
			if in.IsNull() {
				in.Skip()
				out.HideOwner = nil
			} else {
				if out.HideOwner == nil {
					out.HideOwner = new(bool)
				}
				*out.HideOwner = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalDeliveryDto(out *jwriter.Writer, in UpdateGroup) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"group_info\":"
		out.RawString(prefix)
		if in.Info == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Info))
		}
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		if in.Link == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Link))
		}
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		if in.Avatar == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Avatar))
		}
	}
	{
		const prefix string = ",\"privacy\":"
		out.RawString(prefix)
		if in.Privacy == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Privacy))
		}
	}
	{
		const prefix string = ",\"hide_owner\":"
		out.RawString(prefix)
		if in.HideOwner == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.HideOwner))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateGroup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalDeliveryDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateGroup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalDeliveryDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateGroup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalDeliveryDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateGroup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalDeliveryDto(l, v)
}
func easyjson1c045807DecodeDepecheInternalDeliveryDto1(in *jlexer.Lexer, out *Requests) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "link":
			out.AcceptEmail = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalDeliveryDto1(out *jwriter.Writer, in Requests) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix[1:])
		out.String(string(in.AcceptEmail))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Requests) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalDeliveryDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Requests) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalDeliveryDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Requests) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalDeliveryDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Requests) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalDeliveryDto1(l, v)
}
func easyjson1c045807DecodeDepecheInternalDeliveryDto2(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "group_info":
			out.Info = string(in.String())
		case "avatar_url":
			out.Avatar = string(in.String())
		case "privacy":
			out.Privacy = string(in.String())
		case "hide_owner":
			out.HideOwner = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalDeliveryDto2(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"group_info\":"
		out.RawString(prefix)
		out.String(string(in.Info))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"privacy\":"
		out.RawString(prefix)
		out.String(string(in.Privacy))
	}
	{
		const prefix string = ",\"hide_owner\":"
		out.RawString(prefix)
		out.Bool(bool(in.HideOwner))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Group) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalDeliveryDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Group) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalDeliveryDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Group) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalDeliveryDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Group) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalDeliveryDto2(l, v)
}
func easyjson1c045807DecodeDepecheInternalDeliveryDto3(in *jlexer.Lexer, out *AddManager) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalDeliveryDto3(out *jwriter.Writer, in AddManager) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddManager) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalDeliveryDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddManager) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalDeliveryDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddManager) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalDeliveryDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddManager) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalDeliveryDto3(l, v)
}
