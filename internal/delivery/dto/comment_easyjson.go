// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE9abebc9DecodeDepecheInternalDeliveryDto(in *jlexer.Lexer, out *GetCommentsDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		case "LastCommentDate":
			if in.IsNull() {
				in.Skip()
				out.LastCommentDate = nil
			} else {
				if out.LastCommentDate == nil {
					out.LastCommentDate = new(string)
				}
				*out.LastCommentDate = string(in.String())
			}
		case "Count":
			if in.IsNull() {
				in.Skip()
				out.Count = nil
			} else {
				if out.Count == nil {
					out.Count = new(string)
				}
				*out.Count = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeDepecheInternalDeliveryDto(out *jwriter.Writer, in GetCommentsDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"LastCommentDate\":"
		out.RawString(prefix)
		if in.LastCommentDate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.LastCommentDate))
		}
	}
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix)
		if in.Count == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Count))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetCommentsDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeDepecheInternalDeliveryDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetCommentsDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeDepecheInternalDeliveryDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetCommentsDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeDepecheInternalDeliveryDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetCommentsDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeDepecheInternalDeliveryDto(l, v)
}
func easyjsonE9abebc9DecodeDepecheInternalDeliveryDto1(in *jlexer.Lexer, out *EditCommentDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(uint)
				}
				*out.ID = uint(in.Uint())
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeDepecheInternalDeliveryDto1(out *jwriter.Writer, in EditCommentDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.ID))
		}
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		if in.Text == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Text))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditCommentDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeDepecheInternalDeliveryDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditCommentDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeDepecheInternalDeliveryDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditCommentDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeDepecheInternalDeliveryDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditCommentDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeDepecheInternalDeliveryDto1(l, v)
}
func easyjsonE9abebc9DecodeDepecheInternalDeliveryDto2(in *jlexer.Lexer, out *CreateCommentDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post_id":
			if in.IsNull() {
				in.Skip()
				out.PostID = nil
			} else {
				if out.PostID == nil {
					out.PostID = new(uint)
				}
				*out.PostID = uint(in.Uint())
			}
		case "reply_to":
			if in.IsNull() {
				in.Skip()
				out.ReplyTo = nil
			} else {
				if out.ReplyTo == nil {
					out.ReplyTo = new(string)
				}
				*out.ReplyTo = string(in.String())
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeDepecheInternalDeliveryDto2(out *jwriter.Writer, in CreateCommentDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post_id\":"
		out.RawString(prefix[1:])
		if in.PostID == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.PostID))
		}
	}
	{
		const prefix string = ",\"reply_to\":"
		out.RawString(prefix)
		if in.ReplyTo == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ReplyTo))
		}
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		if in.Text == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Text))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateCommentDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeDepecheInternalDeliveryDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateCommentDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeDepecheInternalDeliveryDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateCommentDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeDepecheInternalDeliveryDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateCommentDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeDepecheInternalDeliveryDto2(l, v)
}
