// Code generated by MockGen. DO NOT EDIT.
// Source: feed.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	dto "depeche/internal/delivery/dto"
	entities "depeche/internal/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFeed is a mock of Feed interface.
type MockFeed struct {
	ctrl     *gomock.Controller
	recorder *MockFeedMockRecorder
}

// MockFeedMockRecorder is the mock recorder for MockFeed.
type MockFeedMockRecorder struct {
	mock *MockFeed
}

// NewMockFeed creates a new mock instance.
func NewMockFeed(ctrl *gomock.Controller) *MockFeed {
	mock := &MockFeed{ctrl: ctrl}
	mock.recorder = &MockFeedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeed) EXPECT() *MockFeedMockRecorder {
	return m.recorder
}

// CollectPosts mocks base method.
func (m *MockFeed) CollectPosts(email string, dto *dto.FeedDTO) ([]*entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectPosts", email, dto)
	ret0, _ := ret[0].([]*entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectPosts indicates an expected call of CollectPosts.
func (mr *MockFeedMockRecorder) CollectPosts(email, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectPosts", reflect.TypeOf((*MockFeed)(nil).CollectPosts), email, dto)
}
