// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	dto "depeche/internal/delivery/dto"
	entities "depeche/internal/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// EditProfile mocks base method.
func (m *MockUser) EditProfile(email string, profile *dto.EditProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProfile", email, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditProfile indicates an expected call of EditProfile.
func (mr *MockUserMockRecorder) EditProfile(email, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfile", reflect.TypeOf((*MockUser)(nil).EditProfile), email, profile)
}

// GetAllUsers mocks base method.
func (m *MockUser) GetAllUsers(email string, limit, offset int) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", email, limit, offset)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserMockRecorder) GetAllUsers(email, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUser)(nil).GetAllUsers), email, limit, offset)
}

// GetFriendsByEmail mocks base method.
func (m *MockUser) GetFriendsByEmail(email string, limit, offset int) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendsByEmail", email, limit, offset)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendsByEmail indicates an expected call of GetFriendsByEmail.
func (mr *MockUserMockRecorder) GetFriendsByEmail(email, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendsByEmail", reflect.TypeOf((*MockUser)(nil).GetFriendsByEmail), email, limit, offset)
}

// GetFriendsByLink mocks base method.
func (m *MockUser) GetFriendsByLink(requestEmail, targetLink string, limit, offset int) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendsByLink", requestEmail, targetLink, limit, offset)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendsByLink indicates an expected call of GetFriendsByLink.
func (mr *MockUserMockRecorder) GetFriendsByLink(requestEmail, targetLink, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendsByLink", reflect.TypeOf((*MockUser)(nil).GetFriendsByLink), requestEmail, targetLink, limit, offset)
}

// GetPendingRequestsByEmail mocks base method.
func (m *MockUser) GetPendingRequestsByEmail(email string, limit, offset int) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingRequestsByEmail", email, limit, offset)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingRequestsByEmail indicates an expected call of GetPendingRequestsByEmail.
func (mr *MockUserMockRecorder) GetPendingRequestsByEmail(email, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingRequestsByEmail", reflect.TypeOf((*MockUser)(nil).GetPendingRequestsByEmail), email, limit, offset)
}

// GetProfileByEmail mocks base method.
func (m *MockUser) GetProfileByEmail(email string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByEmail", email)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByEmail indicates an expected call of GetProfileByEmail.
func (mr *MockUserMockRecorder) GetProfileByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByEmail", reflect.TypeOf((*MockUser)(nil).GetProfileByEmail), email)
}

// GetProfileByLink mocks base method.
func (m *MockUser) GetProfileByLink(email, link string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByLink", email, link)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByLink indicates an expected call of GetProfileByLink.
func (mr *MockUserMockRecorder) GetProfileByLink(email, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByLink", reflect.TypeOf((*MockUser)(nil).GetProfileByLink), email, link)
}

// GetSubscribersByEmail mocks base method.
func (m *MockUser) GetSubscribersByEmail(email string, limit, offset int) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribersByEmail", email, limit, offset)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribersByEmail indicates an expected call of GetSubscribersByEmail.
func (mr *MockUserMockRecorder) GetSubscribersByEmail(email, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribersByEmail", reflect.TypeOf((*MockUser)(nil).GetSubscribersByEmail), email, limit, offset)
}

// GetSubscribersByLink mocks base method.
func (m *MockUser) GetSubscribersByLink(requestEmail, targetLink string, limit, offset int) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribersByLink", requestEmail, targetLink, limit, offset)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribersByLink indicates an expected call of GetSubscribersByLink.
func (mr *MockUserMockRecorder) GetSubscribersByLink(requestEmail, targetLink, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribersByLink", reflect.TypeOf((*MockUser)(nil).GetSubscribersByLink), requestEmail, targetLink, limit, offset)
}

// GetSubscribesByEmail mocks base method.
func (m *MockUser) GetSubscribesByEmail(email string, limit, offset int) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribesByEmail", email, limit, offset)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribesByEmail indicates an expected call of GetSubscribesByEmail.
func (mr *MockUserMockRecorder) GetSubscribesByEmail(email, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribesByEmail", reflect.TypeOf((*MockUser)(nil).GetSubscribesByEmail), email, limit, offset)
}

// GetSubscribesByLink mocks base method.
func (m *MockUser) GetSubscribesByLink(requestEmail, targetLink string, limit, offset int) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribesByLink", requestEmail, targetLink, limit, offset)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribesByLink indicates an expected call of GetSubscribesByLink.
func (mr *MockUserMockRecorder) GetSubscribesByLink(requestEmail, targetLink, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribesByLink", reflect.TypeOf((*MockUser)(nil).GetSubscribesByLink), requestEmail, targetLink, limit, offset)
}

// GlobalSearch mocks base method.
func (m *MockUser) GlobalSearch(email string, dto *dto.GlobalSearchDTO) ([]*entities.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GlobalSearch", email, dto)
	ret0, _ := ret[0].([]*entities.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GlobalSearch indicates an expected call of GlobalSearch.
func (mr *MockUserMockRecorder) GlobalSearch(email, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalSearch", reflect.TypeOf((*MockUser)(nil).GlobalSearch), email, dto)
}

// Reject mocks base method.
func (m *MockUser) Reject(rejectEmail, followerLink string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reject", rejectEmail, followerLink)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reject indicates an expected call of Reject.
func (mr *MockUserMockRecorder) Reject(rejectEmail, followerLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reject", reflect.TypeOf((*MockUser)(nil).Reject), rejectEmail, followerLink)
}

// SignIn mocks base method.
func (m *MockUser) SignIn(user *dto.SignIn) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", user)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUserMockRecorder) SignIn(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUser)(nil).SignIn), user)
}

// SignUp mocks base method.
func (m *MockUser) SignUp(user *dto.SignUp) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", user)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserMockRecorder) SignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUser)(nil).SignUp), user)
}

// Subscribe mocks base method.
func (m *MockUser) Subscribe(subEmail, followLink string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", subEmail, followLink)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockUserMockRecorder) Subscribe(subEmail, followLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockUser)(nil).Subscribe), subEmail, followLink)
}

// Unsubscribe mocks base method.
func (m *MockUser) Unsubscribe(subEmail, followLink string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", subEmail, followLink)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockUserMockRecorder) Unsubscribe(subEmail, followLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockUser)(nil).Unsubscribe), subEmail, followLink)
}
