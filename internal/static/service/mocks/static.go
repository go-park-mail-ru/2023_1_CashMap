// Code generated by MockGen. DO NOT EDIT.
// Source: service/file.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	entities "depeche/internal/static/entities"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileUsecase is a mock of FileUsecase interface.
type MockFileUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockFileUsecaseMockRecorder
}

// MockFileUsecaseMockRecorder is the mock recorder for MockFileUsecase.
type MockFileUsecaseMockRecorder struct {
	mock *MockFileUsecase
}

// NewMockFileUsecase creates a new mock instance.
func NewMockFileUsecase(ctrl *gomock.Controller) *MockFileUsecase {
	mock := &MockFileUsecase{ctrl: ctrl}
	mock.recorder = &MockFileUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileUsecase) EXPECT() *MockFileUsecaseMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockFileUsecase) CreateFile(userFile []*entities.UserFile, fileDescriptors []io.ReadCloser) ([]*entities.UserFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", userFile, fileDescriptors)
	ret0, _ := ret[0].([]*entities.UserFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileUsecaseMockRecorder) CreateFile(userFile, fileDescriptors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileUsecase)(nil).CreateFile), userFile, fileDescriptors)
}

// DeleteFile mocks base method.
func (m *MockFileUsecase) DeleteFile(file *entities.UserFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileUsecaseMockRecorder) DeleteFile(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileUsecase)(nil).DeleteFile), file)
}

// ReadFile mocks base method.
func (m *MockFileUsecase) ReadFile(file *entities.UserFile, outputStreamWriter io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", file, outputStreamWriter)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileUsecaseMockRecorder) ReadFile(file, outputStreamWriter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileUsecase)(nil).ReadFile), file, outputStreamWriter)
}
