// Code generated by MockGen. DO NOT EDIT.
// Source: repository/file.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	entities "depeche/internal/static/entities"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFileRepository) DeleteFile(file *entities.UserFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileRepositoryMockRecorder) DeleteFile(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileRepository)(nil).DeleteFile), file)
}

// ReadFile mocks base method.
func (m *MockFileRepository) ReadFile(file *entities.UserFile, outputStream io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", file, outputStream)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileRepositoryMockRecorder) ReadFile(file, outputStream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileRepository)(nil).ReadFile), file, outputStream)
}

// WriteFile mocks base method.
func (m *MockFileRepository) WriteFile(file *entities.UserFile, fileDescriptor io.ReadCloser, cancelCtx, finishCtx context.Context, errorChan chan error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteFile", file, fileDescriptor, cancelCtx, finishCtx, errorChan)
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFileRepositoryMockRecorder) WriteFile(file, fileDescriptor, cancelCtx, finishCtx, errorChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFileRepository)(nil).WriteFile), file, fileDescriptor, cancelCtx, finishCtx, errorChan)
}
