// Code generated by MockGen. DO NOT EDIT.
// Source: depeche/internal/repository (interfaces: MessageRepository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	dto "depeche/internal/delivery/dto"
	entities "depeche/internal/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// AddMessageAttachments mocks base method.
func (m *MockMessageRepository) AddMessageAttachments(arg0 uint, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessageAttachments", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMessageAttachments indicates an expected call of AddMessageAttachments.
func (mr *MockMessageRepositoryMockRecorder) AddMessageAttachments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageAttachments", reflect.TypeOf((*MockMessageRepository)(nil).AddMessageAttachments), arg0, arg1)
}

// CheckRead mocks base method.
func (m *MockMessageRepository) CheckRead(arg0 string, arg1 uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRead", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRead indicates an expected call of CheckRead.
func (mr *MockMessageRepositoryMockRecorder) CheckRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRead", reflect.TypeOf((*MockMessageRepository)(nil).CheckRead), arg0, arg1)
}

// CreateChat mocks base method.
func (m *MockMessageRepository) CreateChat(arg0 string, arg1 *dto.CreateChatDTO) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", arg0, arg1)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockMessageRepositoryMockRecorder) CreateChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockMessageRepository)(nil).CreateChat), arg0, arg1)
}

// GetMembersByChatId mocks base method.
func (m *MockMessageRepository) GetMembersByChatId(arg0 uint) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembersByChatId", arg0)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembersByChatId indicates an expected call of GetMembersByChatId.
func (mr *MockMessageRepositoryMockRecorder) GetMembersByChatId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersByChatId", reflect.TypeOf((*MockMessageRepository)(nil).GetMembersByChatId), arg0)
}

// GetMessageAttachments mocks base method.
func (m *MockMessageRepository) GetMessageAttachments(arg0 uint) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageAttachments", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageAttachments indicates an expected call of GetMessageAttachments.
func (mr *MockMessageRepositoryMockRecorder) GetMessageAttachments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageAttachments", reflect.TypeOf((*MockMessageRepository)(nil).GetMessageAttachments), arg0)
}

// GetUnreadChatsCount mocks base method.
func (m *MockMessageRepository) GetUnreadChatsCount(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadChatsCount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadChatsCount indicates an expected call of GetUnreadChatsCount.
func (mr *MockMessageRepositoryMockRecorder) GetUnreadChatsCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadChatsCount", reflect.TypeOf((*MockMessageRepository)(nil).GetUnreadChatsCount), arg0)
}

// GetUserInfoByMessageId mocks base method.
func (m *MockMessageRepository) GetUserInfoByMessageId(arg0 uint) (*entities.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByMessageId", arg0)
	ret0, _ := ret[0].(*entities.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByMessageId indicates an expected call of GetUserInfoByMessageId.
func (mr *MockMessageRepositoryMockRecorder) GetUserInfoByMessageId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByMessageId", reflect.TypeOf((*MockMessageRepository)(nil).GetUserInfoByMessageId), arg0)
}

// GetUsersInfoByChatID mocks base method.
func (m *MockMessageRepository) GetUsersInfoByChatID(arg0 uint) ([]*entities.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersInfoByChatID", arg0)
	ret0, _ := ret[0].([]*entities.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersInfoByChatID indicates an expected call of GetUsersInfoByChatID.
func (mr *MockMessageRepositoryMockRecorder) GetUsersInfoByChatID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInfoByChatID", reflect.TypeOf((*MockMessageRepository)(nil).GetUsersInfoByChatID), arg0)
}

// HasDialog mocks base method.
func (m *MockMessageRepository) HasDialog(arg0 string, arg1 *dto.HasDialogDTO) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDialog", arg0, arg1)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasDialog indicates an expected call of HasDialog.
func (mr *MockMessageRepositoryMockRecorder) HasDialog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDialog", reflect.TypeOf((*MockMessageRepository)(nil).HasDialog), arg0, arg1)
}

// SaveMsg mocks base method.
func (m *MockMessageRepository) SaveMsg(arg0 *dto.NewMessageDTO) (*entities.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMsg", arg0)
	ret0, _ := ret[0].(*entities.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveMsg indicates an expected call of SaveMsg.
func (mr *MockMessageRepositoryMockRecorder) SaveMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMsg", reflect.TypeOf((*MockMessageRepository)(nil).SaveMsg), arg0)
}

// SelectChats mocks base method.
func (m *MockMessageRepository) SelectChats(arg0 string, arg1 *dto.GetChatsDTO) ([]*entities.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectChats", arg0, arg1)
	ret0, _ := ret[0].([]*entities.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectChats indicates an expected call of SelectChats.
func (mr *MockMessageRepositoryMockRecorder) SelectChats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectChats", reflect.TypeOf((*MockMessageRepository)(nil).SelectChats), arg0, arg1)
}

// SelectMessagesByChatID mocks base method.
func (m *MockMessageRepository) SelectMessagesByChatID(arg0 string, arg1 *dto.GetMessagesDTO) ([]*entities.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectMessagesByChatID", arg0, arg1)
	ret0, _ := ret[0].([]*entities.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectMessagesByChatID indicates an expected call of SelectMessagesByChatID.
func (mr *MockMessageRepositoryMockRecorder) SelectMessagesByChatID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectMessagesByChatID", reflect.TypeOf((*MockMessageRepository)(nil).SelectMessagesByChatID), arg0, arg1)
}

// SetLastRead mocks base method.
func (m *MockMessageRepository) SetLastRead(arg0 string, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastRead", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastRead indicates an expected call of SetLastRead.
func (mr *MockMessageRepositoryMockRecorder) SetLastRead(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastRead", reflect.TypeOf((*MockMessageRepository)(nil).SetLastRead), arg0, arg1, arg2)
}
