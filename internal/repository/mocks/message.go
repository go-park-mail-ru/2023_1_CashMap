// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/message.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	dto "depeche/internal/delivery/dto"
	entities "depeche/internal/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// CreateChat mocks base method.
func (m *MockMessageRepository) CreateChat(senderEmail string, dto *dto.CreateChatDTO) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", senderEmail, dto)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockMessageRepositoryMockRecorder) CreateChat(senderEmail, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockMessageRepository)(nil).CreateChat), senderEmail, dto)
}

// GetMembersByChatId mocks base method.
func (m *MockMessageRepository) GetMembersByChatId(chatId uint) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembersByChatId", chatId)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembersByChatId indicates an expected call of GetMembersByChatId.
func (mr *MockMessageRepositoryMockRecorder) GetMembersByChatId(chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersByChatId", reflect.TypeOf((*MockMessageRepository)(nil).GetMembersByChatId), chatId)
}

// GetUserInfoByMessageId mocks base method.
func (m *MockMessageRepository) GetUserInfoByMessageId(messageID uint) (*entities.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByMessageId", messageID)
	ret0, _ := ret[0].(*entities.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByMessageId indicates an expected call of GetUserInfoByMessageId.
func (mr *MockMessageRepositoryMockRecorder) GetUserInfoByMessageId(messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByMessageId", reflect.TypeOf((*MockMessageRepository)(nil).GetUserInfoByMessageId), messageID)
}

// GetUsersInfoByChatID mocks base method.
func (m *MockMessageRepository) GetUsersInfoByChatID(chatID uint) ([]*entities.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersInfoByChatID", chatID)
	ret0, _ := ret[0].([]*entities.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersInfoByChatID indicates an expected call of GetUsersInfoByChatID.
func (mr *MockMessageRepositoryMockRecorder) GetUsersInfoByChatID(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInfoByChatID", reflect.TypeOf((*MockMessageRepository)(nil).GetUsersInfoByChatID), chatID)
}

// HasDialog mocks base method.
func (m *MockMessageRepository) HasDialog(senderEmail string, dto *dto.HasDialogDTO) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDialog", senderEmail, dto)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasDialog indicates an expected call of HasDialog.
func (mr *MockMessageRepositoryMockRecorder) HasDialog(senderEmail, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDialog", reflect.TypeOf((*MockMessageRepository)(nil).HasDialog), senderEmail, dto)
}

// SaveMsg mocks base method.
func (m *MockMessageRepository) SaveMsg(message *dto.NewMessageDTO) (*entities.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMsg", message)
	ret0, _ := ret[0].(*entities.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveMsg indicates an expected call of SaveMsg.
func (mr *MockMessageRepositoryMockRecorder) SaveMsg(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMsg", reflect.TypeOf((*MockMessageRepository)(nil).SaveMsg), message)
}

// SelectChats mocks base method.
func (m *MockMessageRepository) SelectChats(senderEmail string, dto *dto.GetChatsDTO) ([]*entities.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectChats", senderEmail, dto)
	ret0, _ := ret[0].([]*entities.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectChats indicates an expected call of SelectChats.
func (mr *MockMessageRepositoryMockRecorder) SelectChats(senderEmail, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectChats", reflect.TypeOf((*MockMessageRepository)(nil).SelectChats), senderEmail, dto)
}

// SelectMessagesByChatID mocks base method.
func (m *MockMessageRepository) SelectMessagesByChatID(senderEmail string, dto *dto.GetMessagesDTO) ([]*entities.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectMessagesByChatID", senderEmail, dto)
	ret0, _ := ret[0].([]*entities.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectMessagesByChatID indicates an expected call of SelectMessagesByChatID.
func (mr *MockMessageRepositoryMockRecorder) SelectMessagesByChatID(senderEmail, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectMessagesByChatID", reflect.TypeOf((*MockMessageRepository)(nil).SelectMessagesByChatID), senderEmail, dto)
}
