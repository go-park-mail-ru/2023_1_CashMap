// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	dto "depeche/internal/delivery/dto"
	entities "depeche/internal/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostRepository is a mock of PostRepository interface.
type MockPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryMockRecorder
}

// MockPostRepositoryMockRecorder is the mock recorder for MockPostRepository.
type MockPostRepositoryMockRecorder struct {
	mock *MockPostRepository
}

// NewMockPostRepository creates a new mock instance.
func NewMockPostRepository(ctrl *gomock.Controller) *MockPostRepository {
	mock := &MockPostRepository{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepository) EXPECT() *MockPostRepositoryMockRecorder {
	return m.recorder
}

// CancelLike mocks base method.
func (m *MockPostRepository) CancelLike(email string, postID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelLike", email, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelLike indicates an expected call of CancelLike.
func (mr *MockPostRepositoryMockRecorder) CancelLike(email, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLike", reflect.TypeOf((*MockPostRepository)(nil).CancelLike), email, postID)
}

// CheckReadAccess mocks base method.
func (m *MockPostRepository) CheckReadAccess(senderEmail string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckReadAccess", senderEmail)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckReadAccess indicates an expected call of CheckReadAccess.
func (mr *MockPostRepositoryMockRecorder) CheckReadAccess(senderEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckReadAccess", reflect.TypeOf((*MockPostRepository)(nil).CheckReadAccess), senderEmail)
}

// CheckWriteAccess mocks base method.
func (m *MockPostRepository) CheckWriteAccess(senderEmail string, info *dto.PostCreate) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckWriteAccess", senderEmail, info)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckWriteAccess indicates an expected call of CheckWriteAccess.
func (mr *MockPostRepositoryMockRecorder) CheckWriteAccess(senderEmail, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWriteAccess", reflect.TypeOf((*MockPostRepository)(nil).CheckWriteAccess), senderEmail, info)
}

// CreatePost mocks base method.
func (m *MockPostRepository) CreatePost(senderEmail string, dto *dto.PostCreate) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", senderEmail, dto)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostRepositoryMockRecorder) CreatePost(senderEmail, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostRepository)(nil).CreatePost), senderEmail, dto)
}

// DeletePost mocks base method.
func (m *MockPostRepository) DeletePost(senderEmail string, dto *dto.PostDelete) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", senderEmail, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostRepositoryMockRecorder) DeletePost(senderEmail, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostRepository)(nil).DeletePost), senderEmail, dto)
}

// GetLikesAmount mocks base method.
func (m *MockPostRepository) GetLikesAmount(email string, postID uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikesAmount", email, postID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikesAmount indicates an expected call of GetLikesAmount.
func (mr *MockPostRepositoryMockRecorder) GetLikesAmount(email, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikesAmount", reflect.TypeOf((*MockPostRepository)(nil).GetLikesAmount), email, postID)
}

// GetPostSenderInfo mocks base method.
func (m *MockPostRepository) GetPostSenderInfo(postID uint) (*entities.UserInfo, *entities.CommunityInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostSenderInfo", postID)
	ret0, _ := ret[0].(*entities.UserInfo)
	ret1, _ := ret[1].(*entities.CommunityInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPostSenderInfo indicates an expected call of GetPostSenderInfo.
func (mr *MockPostRepositoryMockRecorder) GetPostSenderInfo(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostSenderInfo", reflect.TypeOf((*MockPostRepository)(nil).GetPostSenderInfo), postID)
}

// SelectPostById mocks base method.
func (m *MockPostRepository) SelectPostById(postId uint, email string) (*entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPostById", postId, email)
	ret0, _ := ret[0].(*entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPostById indicates an expected call of SelectPostById.
func (mr *MockPostRepositoryMockRecorder) SelectPostById(postId, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPostById", reflect.TypeOf((*MockPostRepository)(nil).SelectPostById), postId, email)
}

// SelectPostsByCommunityLink mocks base method.
func (m *MockPostRepository) SelectPostsByCommunityLink(info *dto.PostsGetByLink, email string) ([]*entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPostsByCommunityLink", info, email)
	ret0, _ := ret[0].([]*entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPostsByCommunityLink indicates an expected call of SelectPostsByCommunityLink.
func (mr *MockPostRepositoryMockRecorder) SelectPostsByCommunityLink(info, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPostsByCommunityLink", reflect.TypeOf((*MockPostRepository)(nil).SelectPostsByCommunityLink), info, email)
}

// SelectPostsByUserLink mocks base method.
func (m *MockPostRepository) SelectPostsByUserLink(info *dto.PostsGetByLink, email string) ([]*entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPostsByUserLink", info, email)
	ret0, _ := ret[0].([]*entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPostsByUserLink indicates an expected call of SelectPostsByUserLink.
func (mr *MockPostRepositoryMockRecorder) SelectPostsByUserLink(info, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPostsByUserLink", reflect.TypeOf((*MockPostRepository)(nil).SelectPostsByUserLink), info, email)
}

// SetLike mocks base method.
func (m *MockPostRepository) SetLike(email string, postID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLike", email, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLike indicates an expected call of SetLike.
func (mr *MockPostRepositoryMockRecorder) SetLike(email, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLike", reflect.TypeOf((*MockPostRepository)(nil).SetLike), email, postID)
}

// UpdatePost mocks base method.
func (m *MockPostRepository) UpdatePost(senderEmail string, dto *dto.PostUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", senderEmail, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostRepositoryMockRecorder) UpdatePost(senderEmail, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostRepository)(nil).UpdatePost), senderEmail, dto)
}
