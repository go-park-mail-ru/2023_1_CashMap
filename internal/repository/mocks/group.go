// Code generated by MockGen. DO NOT EDIT.
// Source: depeche/internal/repository (interfaces: Group)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	dto "depeche/internal/delivery/dto"
	entities "depeche/internal/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGroup is a mock of Group interface.
type MockGroup struct {
	ctrl     *gomock.Controller
	recorder *MockGroupMockRecorder
}

// MockGroupMockRecorder is the mock recorder for MockGroup.
type MockGroupMockRecorder struct {
	mock *MockGroup
}

// NewMockGroup creates a new mock instance.
func NewMockGroup(ctrl *gomock.Controller) *MockGroup {
	mock := &MockGroup{ctrl: ctrl}
	mock.recorder = &MockGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroup) EXPECT() *MockGroupMockRecorder {
	return m.recorder
}

// AcceptAllRequests mocks base method.
func (m *MockGroup) AcceptAllRequests(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptAllRequests", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptAllRequests indicates an expected call of AcceptAllRequests.
func (mr *MockGroupMockRecorder) AcceptAllRequests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptAllRequests", reflect.TypeOf((*MockGroup)(nil).AcceptAllRequests), arg0)
}

// AcceptRequest mocks base method.
func (m *MockGroup) AcceptRequest(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptRequest indicates an expected call of AcceptRequest.
func (mr *MockGroupMockRecorder) AcceptRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptRequest", reflect.TypeOf((*MockGroup)(nil).AcceptRequest), arg0, arg1)
}

// CheckAdmin mocks base method.
func (m *MockGroup) CheckAdmin(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAdmin", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAdmin indicates an expected call of CheckAdmin.
func (mr *MockGroupMockRecorder) CheckAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAdmin", reflect.TypeOf((*MockGroup)(nil).CheckAdmin), arg0, arg1)
}

// CheckSub mocks base method.
func (m *MockGroup) CheckSub(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSub", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSub indicates an expected call of CheckSub.
func (mr *MockGroupMockRecorder) CheckSub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSub", reflect.TypeOf((*MockGroup)(nil).CheckSub), arg0, arg1)
}

// CreateGroup mocks base method.
func (m *MockGroup) CreateGroup(arg0 string, arg1 *dto.Group) (*entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1)
	ret0, _ := ret[0].(*entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockGroupMockRecorder) CreateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGroup)(nil).CreateGroup), arg0, arg1)
}

// DeclineRequest mocks base method.
func (m *MockGroup) DeclineRequest(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclineRequest indicates an expected call of DeclineRequest.
func (mr *MockGroupMockRecorder) DeclineRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineRequest", reflect.TypeOf((*MockGroup)(nil).DeclineRequest), arg0, arg1)
}

// DeleteGroup mocks base method.
func (m *MockGroup) DeleteGroup(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockGroupMockRecorder) DeleteGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockGroup)(nil).DeleteGroup), arg0)
}

// GetGroupByLink mocks base method.
func (m *MockGroup) GetGroupByLink(arg0 string) (*entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByLink", arg0)
	ret0, _ := ret[0].(*entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByLink indicates an expected call of GetGroupByLink.
func (mr *MockGroupMockRecorder) GetGroupByLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByLink", reflect.TypeOf((*MockGroup)(nil).GetGroupByLink), arg0)
}

// GetManagedGroups mocks base method.
func (m *MockGroup) GetManagedGroups(arg0 string, arg1, arg2 int) ([]*entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagedGroups", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagedGroups indicates an expected call of GetManagedGroups.
func (mr *MockGroupMockRecorder) GetManagedGroups(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedGroups", reflect.TypeOf((*MockGroup)(nil).GetManagedGroups), arg0, arg1, arg2)
}

// GetPendingRequests mocks base method.
func (m *MockGroup) GetPendingRequests(arg0 string, arg1, arg2 int) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingRequests", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingRequests indicates an expected call of GetPendingRequests.
func (mr *MockGroupMockRecorder) GetPendingRequests(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingRequests", reflect.TypeOf((*MockGroup)(nil).GetPendingRequests), arg0, arg1, arg2)
}

// GetPopularGroups mocks base method.
func (m *MockGroup) GetPopularGroups(arg0 string, arg1, arg2 int) ([]*entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopularGroups", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPopularGroups indicates an expected call of GetPopularGroups.
func (mr *MockGroupMockRecorder) GetPopularGroups(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopularGroups", reflect.TypeOf((*MockGroup)(nil).GetPopularGroups), arg0, arg1, arg2)
}

// GetSubscribers mocks base method.
func (m *MockGroup) GetSubscribers(arg0 string, arg1, arg2 int) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribers indicates an expected call of GetSubscribers.
func (mr *MockGroupMockRecorder) GetSubscribers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribers", reflect.TypeOf((*MockGroup)(nil).GetSubscribers), arg0, arg1, arg2)
}

// GetUserGroupsByEmail mocks base method.
func (m *MockGroup) GetUserGroupsByEmail(arg0 string, arg1, arg2 int) ([]*entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroupsByEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroupsByEmail indicates an expected call of GetUserGroupsByEmail.
func (mr *MockGroupMockRecorder) GetUserGroupsByEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroupsByEmail", reflect.TypeOf((*MockGroup)(nil).GetUserGroupsByEmail), arg0, arg1, arg2)
}

// GetUserGroupsByLink mocks base method.
func (m *MockGroup) GetUserGroupsByLink(arg0 string, arg1, arg2 int) ([]*entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroupsByLink", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroupsByLink indicates an expected call of GetUserGroupsByLink.
func (mr *MockGroupMockRecorder) GetUserGroupsByLink(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroupsByLink", reflect.TypeOf((*MockGroup)(nil).GetUserGroupsByLink), arg0, arg1, arg2)
}

// IsOwner mocks base method.
func (m *MockGroup) IsOwner(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOwner", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner.
func (mr *MockGroupMockRecorder) IsOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockGroup)(nil).IsOwner), arg0, arg1)
}

// Subscribe mocks base method.
func (m *MockGroup) Subscribe(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockGroupMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockGroup)(nil).Subscribe), arg0, arg1)
}

// Unsubscribe mocks base method.
func (m *MockGroup) Unsubscribe(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockGroupMockRecorder) Unsubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockGroup)(nil).Unsubscribe), arg0, arg1)
}

// UpdateAvgGroupAvatarColor mocks base method.
func (m *MockGroup) UpdateAvgGroupAvatarColor(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvgGroupAvatarColor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAvgGroupAvatarColor indicates an expected call of UpdateAvgGroupAvatarColor.
func (mr *MockGroupMockRecorder) UpdateAvgGroupAvatarColor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvgGroupAvatarColor", reflect.TypeOf((*MockGroup)(nil).UpdateAvgGroupAvatarColor), arg0, arg1)
}

// UpdateGroup mocks base method.
func (m *MockGroup) UpdateGroup(arg0 string, arg1 *dto.UpdateGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockGroupMockRecorder) UpdateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockGroup)(nil).UpdateGroup), arg0, arg1)
}

// UpdateGroupAvatar mocks base method.
func (m *MockGroup) UpdateGroupAvatar(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupAvatar", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroupAvatar indicates an expected call of UpdateGroupAvatar.
func (mr *MockGroupMockRecorder) UpdateGroupAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupAvatar", reflect.TypeOf((*MockGroup)(nil).UpdateGroupAvatar), arg0, arg1)
}
