// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package response

import (
	dto "depeche/internal/delivery/dto"
	entities "depeche/internal/entities"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson687b2e5cDecodeDepecheInternalEntitiesResponse(in *jlexer.Lexer, out *UploadStickerPackResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson687b2e5cEncodeDepecheInternalEntitiesResponse(out *jwriter.Writer, in UploadStickerPackResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UploadStickerPackResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UploadStickerPackResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UploadStickerPackResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UploadStickerPackResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse(l, v)
}
func easyjson687b2e5cDecodeDepecheInternalEntitiesResponse1(in *jlexer.Lexer, out *UploadStickerPackRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				if out.Body == nil {
					out.Body = new(dto.UploadStickerPack)
				}
				(*out.Body).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson687b2e5cEncodeDepecheInternalEntitiesResponse1(out *jwriter.Writer, in UploadStickerPackRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		if in.Body == nil {
			out.RawString("null")
		} else {
			(*in.Body).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UploadStickerPackRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UploadStickerPackRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UploadStickerPackRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UploadStickerPackRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse1(l, v)
}
func easyjson687b2e5cDecodeDepecheInternalEntitiesResponse2(in *jlexer.Lexer, out *UploadStickerPackBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stickerpack":
			if in.IsNull() {
				in.Skip()
				out.Stickerpack = nil
			} else {
				if out.Stickerpack == nil {
					out.Stickerpack = new(entities.StickerPack)
				}
				(*out.Stickerpack).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson687b2e5cEncodeDepecheInternalEntitiesResponse2(out *jwriter.Writer, in UploadStickerPackBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stickerpack\":"
		out.RawString(prefix[1:])
		if in.Stickerpack == nil {
			out.RawString("null")
		} else {
			(*in.Stickerpack).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UploadStickerPackBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UploadStickerPackBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UploadStickerPackBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UploadStickerPackBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse2(l, v)
}
func easyjson687b2e5cDecodeDepecheInternalEntitiesResponse3(in *jlexer.Lexer, out *GetUserStickerPacksResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson687b2e5cEncodeDepecheInternalEntitiesResponse3(out *jwriter.Writer, in GetUserStickerPacksResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetUserStickerPacksResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetUserStickerPacksResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetUserStickerPacksResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetUserStickerPacksResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse3(l, v)
}
func easyjson687b2e5cDecodeDepecheInternalEntitiesResponse4(in *jlexer.Lexer, out *GetUserStickerPacksBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stickerpacks":
			if in.IsNull() {
				in.Skip()
				out.Stickerpacks = nil
			} else {
				in.Delim('[')
				if out.Stickerpacks == nil {
					if !in.IsDelim(']') {
						out.Stickerpacks = make([]*entities.StickerPack, 0, 8)
					} else {
						out.Stickerpacks = []*entities.StickerPack{}
					}
				} else {
					out.Stickerpacks = (out.Stickerpacks)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *entities.StickerPack
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(entities.StickerPack)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Stickerpacks = append(out.Stickerpacks, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson687b2e5cEncodeDepecheInternalEntitiesResponse4(out *jwriter.Writer, in GetUserStickerPacksBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stickerpacks\":"
		out.RawString(prefix[1:])
		if in.Stickerpacks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Stickerpacks {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetUserStickerPacksBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetUserStickerPacksBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetUserStickerPacksBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetUserStickerPacksBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse4(l, v)
}
func easyjson687b2e5cDecodeDepecheInternalEntitiesResponse5(in *jlexer.Lexer, out *GetStickerPacksByAuthorResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson687b2e5cEncodeDepecheInternalEntitiesResponse5(out *jwriter.Writer, in GetStickerPacksByAuthorResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetStickerPacksByAuthorResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetStickerPacksByAuthorResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetStickerPacksByAuthorResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetStickerPacksByAuthorResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse5(l, v)
}
func easyjson687b2e5cDecodeDepecheInternalEntitiesResponse6(in *jlexer.Lexer, out *GetStickerPacksByAuthorBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stickerpacks":
			if in.IsNull() {
				in.Skip()
				out.Stickerpacks = nil
			} else {
				in.Delim('[')
				if out.Stickerpacks == nil {
					if !in.IsDelim(']') {
						out.Stickerpacks = make([]*entities.StickerPack, 0, 8)
					} else {
						out.Stickerpacks = []*entities.StickerPack{}
					}
				} else {
					out.Stickerpacks = (out.Stickerpacks)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *entities.StickerPack
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(entities.StickerPack)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Stickerpacks = append(out.Stickerpacks, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson687b2e5cEncodeDepecheInternalEntitiesResponse6(out *jwriter.Writer, in GetStickerPacksByAuthorBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stickerpacks\":"
		out.RawString(prefix[1:])
		if in.Stickerpacks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Stickerpacks {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetStickerPacksByAuthorBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetStickerPacksByAuthorBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetStickerPacksByAuthorBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetStickerPacksByAuthorBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse6(l, v)
}
func easyjson687b2e5cDecodeDepecheInternalEntitiesResponse7(in *jlexer.Lexer, out *GetStickerPackResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson687b2e5cEncodeDepecheInternalEntitiesResponse7(out *jwriter.Writer, in GetStickerPackResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetStickerPackResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetStickerPackResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetStickerPackResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetStickerPackResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse7(l, v)
}
func easyjson687b2e5cDecodeDepecheInternalEntitiesResponse8(in *jlexer.Lexer, out *GetStickerPackInfoResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson687b2e5cEncodeDepecheInternalEntitiesResponse8(out *jwriter.Writer, in GetStickerPackInfoResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetStickerPackInfoResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetStickerPackInfoResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetStickerPackInfoResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetStickerPackInfoResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse8(l, v)
}
func easyjson687b2e5cDecodeDepecheInternalEntitiesResponse9(in *jlexer.Lexer, out *GetStickerPackInfoBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stickerpack":
			if in.IsNull() {
				in.Skip()
				out.Stickerpack = nil
			} else {
				if out.Stickerpack == nil {
					out.Stickerpack = new(entities.StickerPack)
				}
				(*out.Stickerpack).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson687b2e5cEncodeDepecheInternalEntitiesResponse9(out *jwriter.Writer, in GetStickerPackInfoBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stickerpack\":"
		out.RawString(prefix[1:])
		if in.Stickerpack == nil {
			out.RawString("null")
		} else {
			(*in.Stickerpack).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetStickerPackInfoBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetStickerPackInfoBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetStickerPackInfoBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetStickerPackInfoBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse9(l, v)
}
func easyjson687b2e5cDecodeDepecheInternalEntitiesResponse10(in *jlexer.Lexer, out *GetStickerPackBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stickerpack":
			if in.IsNull() {
				in.Skip()
				out.Stickerpack = nil
			} else {
				if out.Stickerpack == nil {
					out.Stickerpack = new(entities.StickerPack)
				}
				(*out.Stickerpack).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson687b2e5cEncodeDepecheInternalEntitiesResponse10(out *jwriter.Writer, in GetStickerPackBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stickerpack\":"
		out.RawString(prefix[1:])
		if in.Stickerpack == nil {
			out.RawString("null")
		} else {
			(*in.Stickerpack).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetStickerPackBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetStickerPackBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetStickerPackBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetStickerPackBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse10(l, v)
}
func easyjson687b2e5cDecodeDepecheInternalEntitiesResponse11(in *jlexer.Lexer, out *GetStickerByIdResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson687b2e5cEncodeDepecheInternalEntitiesResponse11(out *jwriter.Writer, in GetStickerByIdResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetStickerByIdResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetStickerByIdResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetStickerByIdResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetStickerByIdResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse11(l, v)
}
func easyjson687b2e5cDecodeDepecheInternalEntitiesResponse12(in *jlexer.Lexer, out *GetStickerByIdBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sticker":
			if in.IsNull() {
				in.Skip()
				out.Sticker = nil
			} else {
				if out.Sticker == nil {
					out.Sticker = new(entities.Sticker)
				}
				(*out.Sticker).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson687b2e5cEncodeDepecheInternalEntitiesResponse12(out *jwriter.Writer, in GetStickerByIdBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sticker\":"
		out.RawString(prefix[1:])
		if in.Sticker == nil {
			out.RawString("null")
		} else {
			(*in.Sticker).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetStickerByIdBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetStickerByIdBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetStickerByIdBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetStickerByIdBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse12(l, v)
}
func easyjson687b2e5cDecodeDepecheInternalEntitiesResponse13(in *jlexer.Lexer, out *GetNewStickerPacksResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson687b2e5cEncodeDepecheInternalEntitiesResponse13(out *jwriter.Writer, in GetNewStickerPacksResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetNewStickerPacksResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetNewStickerPacksResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetNewStickerPacksResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetNewStickerPacksResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse13(l, v)
}
func easyjson687b2e5cDecodeDepecheInternalEntitiesResponse14(in *jlexer.Lexer, out *GetNewStickerPacksBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stickerpacks":
			if in.IsNull() {
				in.Skip()
				out.Stickerpacks = nil
			} else {
				in.Delim('[')
				if out.Stickerpacks == nil {
					if !in.IsDelim(']') {
						out.Stickerpacks = make([]*entities.StickerPack, 0, 8)
					} else {
						out.Stickerpacks = []*entities.StickerPack{}
					}
				} else {
					out.Stickerpacks = (out.Stickerpacks)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *entities.StickerPack
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(entities.StickerPack)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Stickerpacks = append(out.Stickerpacks, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson687b2e5cEncodeDepecheInternalEntitiesResponse14(out *jwriter.Writer, in GetNewStickerPacksBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stickerpacks\":"
		out.RawString(prefix[1:])
		if in.Stickerpacks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Stickerpacks {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetNewStickerPacksBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetNewStickerPacksBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetNewStickerPacksBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetNewStickerPacksBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse14(l, v)
}
func easyjson687b2e5cDecodeDepecheInternalEntitiesResponse15(in *jlexer.Lexer, out *AddStickerPackRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				if out.Body == nil {
					out.Body = new(dto.AddStickerPack)
				}
				(*out.Body).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson687b2e5cEncodeDepecheInternalEntitiesResponse15(out *jwriter.Writer, in AddStickerPackRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		if in.Body == nil {
			out.RawString("null")
		} else {
			(*in.Body).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddStickerPackRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddStickerPackRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson687b2e5cEncodeDepecheInternalEntitiesResponse15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddStickerPackRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddStickerPackRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson687b2e5cDecodeDepecheInternalEntitiesResponse15(l, v)
}
