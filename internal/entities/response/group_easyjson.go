// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package response

import (
	dto "depeche/internal/delivery/dto"
	entities "depeche/internal/entities"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1c045807DecodeDepecheInternalEntitiesResponse(in *jlexer.Lexer, out *UpdateGroupRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				if out.Body == nil {
					out.Body = new(dto.UpdateGroup)
				}
				(*out.Body).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse(out *jwriter.Writer, in UpdateGroupRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		if in.Body == nil {
			out.RawString("null")
		} else {
			(*in.Body).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateGroupRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateGroupRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateGroupRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateGroupRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse(l, v)
}
func easyjson1c045807DecodeDepecheInternalEntitiesResponse1(in *jlexer.Lexer, out *PendingGroupRequestsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse1(out *jwriter.Writer, in PendingGroupRequestsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PendingGroupRequestsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PendingGroupRequestsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PendingGroupRequestsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PendingGroupRequestsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse1(l, v)
}
func easyjson1c045807DecodeDepecheInternalEntitiesResponse2(in *jlexer.Lexer, out *PendingGroupRequestsBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "profiles":
			if in.IsNull() {
				in.Skip()
				out.Profiles = nil
			} else {
				in.Delim('[')
				if out.Profiles == nil {
					if !in.IsDelim(']') {
						out.Profiles = make([]*dto.Profile, 0, 8)
					} else {
						out.Profiles = []*dto.Profile{}
					}
				} else {
					out.Profiles = (out.Profiles)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *dto.Profile
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(dto.Profile)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Profiles = append(out.Profiles, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse2(out *jwriter.Writer, in PendingGroupRequestsBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"profiles\":"
		out.RawString(prefix[1:])
		if in.Profiles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Profiles {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PendingGroupRequestsBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PendingGroupRequestsBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PendingGroupRequestsBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PendingGroupRequestsBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse2(l, v)
}
func easyjson1c045807DecodeDepecheInternalEntitiesResponse3(in *jlexer.Lexer, out *GetUserGroupsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse3(out *jwriter.Writer, in GetUserGroupsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetUserGroupsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetUserGroupsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetUserGroupsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetUserGroupsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse3(l, v)
}
func easyjson1c045807DecodeDepecheInternalEntitiesResponse4(in *jlexer.Lexer, out *GetUserGroupsBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]*entities.Group, 0, 8)
					} else {
						out.Groups = []*entities.Group{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *entities.Group
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(entities.Group)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Groups = append(out.Groups, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse4(out *jwriter.Writer, in GetUserGroupsBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"groups\":"
		out.RawString(prefix[1:])
		if in.Groups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Groups {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetUserGroupsBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetUserGroupsBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetUserGroupsBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetUserGroupsBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse4(l, v)
}
func easyjson1c045807DecodeDepecheInternalEntitiesResponse5(in *jlexer.Lexer, out *GetSubscribersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse5(out *jwriter.Writer, in GetSubscribersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetSubscribersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetSubscribersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetSubscribersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetSubscribersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse5(l, v)
}
func easyjson1c045807DecodeDepecheInternalEntitiesResponse6(in *jlexer.Lexer, out *GetSubscribersBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "profiles":
			if in.IsNull() {
				in.Skip()
				out.Profiles = nil
			} else {
				in.Delim('[')
				if out.Profiles == nil {
					if !in.IsDelim(']') {
						out.Profiles = make([]*dto.Profile, 0, 8)
					} else {
						out.Profiles = []*dto.Profile{}
					}
				} else {
					out.Profiles = (out.Profiles)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *dto.Profile
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(dto.Profile)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Profiles = append(out.Profiles, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse6(out *jwriter.Writer, in GetSubscribersBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"profiles\":"
		out.RawString(prefix[1:])
		if in.Profiles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Profiles {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetSubscribersBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetSubscribersBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetSubscribersBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetSubscribersBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse6(l, v)
}
func easyjson1c045807DecodeDepecheInternalEntitiesResponse7(in *jlexer.Lexer, out *GetPopularGroupsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse7(out *jwriter.Writer, in GetPopularGroupsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPopularGroupsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPopularGroupsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPopularGroupsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPopularGroupsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse7(l, v)
}
func easyjson1c045807DecodeDepecheInternalEntitiesResponse8(in *jlexer.Lexer, out *GetPopularGroupsBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]*entities.Group, 0, 8)
					} else {
						out.Groups = []*entities.Group{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *entities.Group
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(entities.Group)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.Groups = append(out.Groups, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse8(out *jwriter.Writer, in GetPopularGroupsBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"groups\":"
		out.RawString(prefix[1:])
		if in.Groups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Groups {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPopularGroupsBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPopularGroupsBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPopularGroupsBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPopularGroupsBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse8(l, v)
}
func easyjson1c045807DecodeDepecheInternalEntitiesResponse9(in *jlexer.Lexer, out *GetManagedGroupsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse9(out *jwriter.Writer, in GetManagedGroupsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetManagedGroupsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetManagedGroupsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetManagedGroupsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetManagedGroupsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse9(l, v)
}
func easyjson1c045807DecodeDepecheInternalEntitiesResponse10(in *jlexer.Lexer, out *GetManagedGroupsBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]*entities.Group, 0, 8)
					} else {
						out.Groups = []*entities.Group{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *entities.Group
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(entities.Group)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.Groups = append(out.Groups, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse10(out *jwriter.Writer, in GetManagedGroupsBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"groups\":"
		out.RawString(prefix[1:])
		if in.Groups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Groups {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetManagedGroupsBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetManagedGroupsBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetManagedGroupsBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetManagedGroupsBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse10(l, v)
}
func easyjson1c045807DecodeDepecheInternalEntitiesResponse11(in *jlexer.Lexer, out *GetGroupsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse11(out *jwriter.Writer, in GetGroupsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetGroupsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetGroupsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetGroupsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetGroupsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse11(l, v)
}
func easyjson1c045807DecodeDepecheInternalEntitiesResponse12(in *jlexer.Lexer, out *GetGroupsBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]*entities.Group, 0, 8)
					} else {
						out.Groups = []*entities.Group{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *entities.Group
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(entities.Group)
						}
						(*v16).UnmarshalEasyJSON(in)
					}
					out.Groups = append(out.Groups, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse12(out *jwriter.Writer, in GetGroupsBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"groups\":"
		out.RawString(prefix[1:])
		if in.Groups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Groups {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					(*v18).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetGroupsBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetGroupsBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetGroupsBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetGroupsBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse12(l, v)
}
func easyjson1c045807DecodeDepecheInternalEntitiesResponse13(in *jlexer.Lexer, out *GetGroupResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse13(out *jwriter.Writer, in GetGroupResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetGroupResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetGroupResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetGroupResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetGroupResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse13(l, v)
}
func easyjson1c045807DecodeDepecheInternalEntitiesResponse14(in *jlexer.Lexer, out *GetGroupBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group_info":
			if in.IsNull() {
				in.Skip()
				out.GroupInfo = nil
			} else {
				if out.GroupInfo == nil {
					out.GroupInfo = new(entities.Group)
				}
				(*out.GroupInfo).UnmarshalEasyJSON(in)
			}
		case "is_sub":
			out.IsSub = bool(in.Bool())
		case "is_admin":
			out.IsAdmin = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse14(out *jwriter.Writer, in GetGroupBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group_info\":"
		out.RawString(prefix[1:])
		if in.GroupInfo == nil {
			out.RawString("null")
		} else {
			(*in.GroupInfo).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"is_sub\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSub))
	}
	{
		const prefix string = ",\"is_admin\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAdmin))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetGroupBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetGroupBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetGroupBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetGroupBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse14(l, v)
}
func easyjson1c045807DecodeDepecheInternalEntitiesResponse15(in *jlexer.Lexer, out *CreateGroupRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				if out.Body == nil {
					out.Body = new(dto.Group)
				}
				(*out.Body).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse15(out *jwriter.Writer, in CreateGroupRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		if in.Body == nil {
			out.RawString("null")
		} else {
			(*in.Body).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateGroupRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateGroupRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateGroupRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateGroupRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse15(l, v)
}
func easyjson1c045807DecodeDepecheInternalEntitiesResponse16(in *jlexer.Lexer, out *AcceptRequestRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				if out.Body == nil {
					out.Body = new(dto.Requests)
				}
				(*out.Body).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1c045807EncodeDepecheInternalEntitiesResponse16(out *jwriter.Writer, in AcceptRequestRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		if in.Body == nil {
			out.RawString("null")
		} else {
			(*in.Body).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AcceptRequestRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1c045807EncodeDepecheInternalEntitiesResponse16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AcceptRequestRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1c045807EncodeDepecheInternalEntitiesResponse16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AcceptRequestRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1c045807DecodeDepecheInternalEntitiesResponse16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AcceptRequestRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1c045807DecodeDepecheInternalEntitiesResponse16(l, v)
}
