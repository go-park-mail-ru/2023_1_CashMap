// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package response

import (
	dto "depeche/internal/delivery/dto"
	entities "depeche/internal/entities"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4086215fDecodeDepecheInternalEntitiesResponse(in *jlexer.Lexer, out *SendRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				if out.Body == nil {
					out.Body = new(dto.NewMessageDTO)
				}
				(*out.Body).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeDepecheInternalEntitiesResponse(out *jwriter.Writer, in SendRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		if in.Body == nil {
			out.RawString("null")
		} else {
			(*in.Body).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeDepecheInternalEntitiesResponse(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeDepecheInternalEntitiesResponse(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeDepecheInternalEntitiesResponse(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeDepecheInternalEntitiesResponse(l, v)
}
func easyjson4086215fDecodeDepecheInternalEntitiesResponse1(in *jlexer.Lexer, out *NewChatResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeDepecheInternalEntitiesResponse1(out *jwriter.Writer, in NewChatResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewChatResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeDepecheInternalEntitiesResponse1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewChatResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeDepecheInternalEntitiesResponse1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewChatResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeDepecheInternalEntitiesResponse1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewChatResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeDepecheInternalEntitiesResponse1(l, v)
}
func easyjson4086215fDecodeDepecheInternalEntitiesResponse2(in *jlexer.Lexer, out *NewChatRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				if out.Body == nil {
					out.Body = new(dto.CreateChatDTO)
				}
				(*out.Body).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeDepecheInternalEntitiesResponse2(out *jwriter.Writer, in NewChatRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		if in.Body == nil {
			out.RawString("null")
		} else {
			(*in.Body).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewChatRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeDepecheInternalEntitiesResponse2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewChatRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeDepecheInternalEntitiesResponse2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewChatRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeDepecheInternalEntitiesResponse2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewChatRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeDepecheInternalEntitiesResponse2(l, v)
}
func easyjson4086215fDecodeDepecheInternalEntitiesResponse3(in *jlexer.Lexer, out *NewChatBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat":
			if in.IsNull() {
				in.Skip()
				out.Chat = nil
			} else {
				if out.Chat == nil {
					out.Chat = new(entities.Chat)
				}
				(*out.Chat).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeDepecheInternalEntitiesResponse3(out *jwriter.Writer, in NewChatBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat\":"
		out.RawString(prefix[1:])
		if in.Chat == nil {
			out.RawString("null")
		} else {
			(*in.Chat).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewChatBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeDepecheInternalEntitiesResponse3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewChatBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeDepecheInternalEntitiesResponse3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewChatBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeDepecheInternalEntitiesResponse3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewChatBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeDepecheInternalEntitiesResponse3(l, v)
}
func easyjson4086215fDecodeDepecheInternalEntitiesResponse4(in *jlexer.Lexer, out *HasDialogResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeDepecheInternalEntitiesResponse4(out *jwriter.Writer, in HasDialogResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HasDialogResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeDepecheInternalEntitiesResponse4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HasDialogResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeDepecheInternalEntitiesResponse4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HasDialogResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeDepecheInternalEntitiesResponse4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HasDialogResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeDepecheInternalEntitiesResponse4(l, v)
}
func easyjson4086215fDecodeDepecheInternalEntitiesResponse5(in *jlexer.Lexer, out *HasDialogBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			out.ChatId = int(in.Int())
		case "has_dialog":
			out.HasDialog = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeDepecheInternalEntitiesResponse5(out *jwriter.Writer, in HasDialogBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ChatId))
	}
	{
		const prefix string = ",\"has_dialog\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasDialog))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HasDialogBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeDepecheInternalEntitiesResponse5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HasDialogBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeDepecheInternalEntitiesResponse5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HasDialogBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeDepecheInternalEntitiesResponse5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HasDialogBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeDepecheInternalEntitiesResponse5(l, v)
}
func easyjson4086215fDecodeDepecheInternalEntitiesResponse6(in *jlexer.Lexer, out *GetMessagesByChatIDResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeDepecheInternalEntitiesResponse6(out *jwriter.Writer, in GetMessagesByChatIDResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetMessagesByChatIDResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeDepecheInternalEntitiesResponse6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMessagesByChatIDResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeDepecheInternalEntitiesResponse6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetMessagesByChatIDResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeDepecheInternalEntitiesResponse6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMessagesByChatIDResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeDepecheInternalEntitiesResponse6(l, v)
}
func easyjson4086215fDecodeDepecheInternalEntitiesResponse7(in *jlexer.Lexer, out *GetMessagesByChatIDBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]*entities.Message, 0, 8)
					} else {
						out.Messages = []*entities.Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *entities.Message
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(entities.Message)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Messages = append(out.Messages, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "has_next":
			out.HasNext = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeDepecheInternalEntitiesResponse7(out *jwriter.Writer, in GetMessagesByChatIDBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix[1:])
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Messages {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"has_next\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasNext))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetMessagesByChatIDBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeDepecheInternalEntitiesResponse7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMessagesByChatIDBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeDepecheInternalEntitiesResponse7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetMessagesByChatIDBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeDepecheInternalEntitiesResponse7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMessagesByChatIDBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeDepecheInternalEntitiesResponse7(l, v)
}
func easyjson4086215fDecodeDepecheInternalEntitiesResponse8(in *jlexer.Lexer, out *GetChatsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeDepecheInternalEntitiesResponse8(out *jwriter.Writer, in GetChatsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetChatsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeDepecheInternalEntitiesResponse8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetChatsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeDepecheInternalEntitiesResponse8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetChatsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeDepecheInternalEntitiesResponse8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetChatsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeDepecheInternalEntitiesResponse8(l, v)
}
func easyjson4086215fDecodeDepecheInternalEntitiesResponse9(in *jlexer.Lexer, out *GetChatsBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chats":
			if in.IsNull() {
				in.Skip()
				out.Chats = nil
			} else {
				in.Delim('[')
				if out.Chats == nil {
					if !in.IsDelim(']') {
						out.Chats = make([]*entities.Chat, 0, 8)
					} else {
						out.Chats = []*entities.Chat{}
					}
				} else {
					out.Chats = (out.Chats)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *entities.Chat
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(entities.Chat)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Chats = append(out.Chats, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeDepecheInternalEntitiesResponse9(out *jwriter.Writer, in GetChatsBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chats\":"
		out.RawString(prefix[1:])
		if in.Chats == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Chats {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetChatsBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeDepecheInternalEntitiesResponse9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetChatsBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeDepecheInternalEntitiesResponse9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetChatsBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeDepecheInternalEntitiesResponse9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetChatsBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeDepecheInternalEntitiesResponse9(l, v)
}
