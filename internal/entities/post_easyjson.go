// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entities

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5a72dc82DecodeDepecheInternalEntities(in *jlexer.Lexer, out *Post) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "author_link":
			out.AuthorLink = string(in.String())
		case "community_info":
			if in.IsNull() {
				in.Skip()
				out.CommunityInfo = nil
			} else {
				if out.CommunityInfo == nil {
					out.CommunityInfo = new(CommunityInfo)
				}
				(*out.CommunityInfo).UnmarshalEasyJSON(in)
			}
		case "owner_info":
			if in.IsNull() {
				in.Skip()
				out.OwnerInfo = nil
			} else {
				if out.OwnerInfo == nil {
					out.OwnerInfo = new(UserInfo)
				}
				easyjson5a72dc82DecodeDepecheInternalEntities1(in, out.OwnerInfo)
			}
		case "show_author":
			out.ShouldShowAuthor = bool(in.Bool())
		case "text_content":
			out.Text = string(in.String())
		case "likes_amount":
			out.Likes = int(in.Int())
		case "comments_amount":
			out.CommentAmount = int(in.Int())
		case "creation_date":
			out.CreationDate = string(in.String())
		case "change_date":
			out.ChangeDate = string(in.String())
		case "is_deleted":
			out.IsDeleted = bool(in.Bool())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]string, 0, 4)
					} else {
						out.Attachments = []string{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Attachments = append(out.Attachments, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_liked":
			out.IsLikedByUser = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDepecheInternalEntities(out *jwriter.Writer, in Post) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"author_link\":"
		out.RawString(prefix)
		out.String(string(in.AuthorLink))
	}
	{
		const prefix string = ",\"community_info\":"
		out.RawString(prefix)
		if in.CommunityInfo == nil {
			out.RawString("null")
		} else {
			(*in.CommunityInfo).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"owner_info\":"
		out.RawString(prefix)
		if in.OwnerInfo == nil {
			out.RawString("null")
		} else {
			easyjson5a72dc82EncodeDepecheInternalEntities1(out, *in.OwnerInfo)
		}
	}
	{
		const prefix string = ",\"show_author\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShouldShowAuthor))
	}
	{
		const prefix string = ",\"text_content\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"likes_amount\":"
		out.RawString(prefix)
		out.Int(int(in.Likes))
	}
	{
		const prefix string = ",\"comments_amount\":"
		out.RawString(prefix)
		out.Int(int(in.CommentAmount))
	}
	{
		const prefix string = ",\"creation_date\":"
		out.RawString(prefix)
		out.String(string(in.CreationDate))
	}
	{
		const prefix string = ",\"change_date\":"
		out.RawString(prefix)
		out.String(string(in.ChangeDate))
	}
	{
		const prefix string = ",\"is_deleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDeleted))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Attachments {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_liked\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLikedByUser))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Post) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeDepecheInternalEntities(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Post) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeDepecheInternalEntities(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Post) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeDepecheInternalEntities(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Post) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeDepecheInternalEntities(l, v)
}
func easyjson5a72dc82DecodeDepecheInternalEntities1(in *jlexer.Lexer, out *UserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			if in.IsNull() {
				in.Skip()
				out.FirstName = nil
			} else {
				if out.FirstName == nil {
					out.FirstName = new(string)
				}
				*out.FirstName = string(in.String())
			}
		case "last_name":
			if in.IsNull() {
				in.Skip()
				out.LastName = nil
			} else {
				if out.LastName == nil {
					out.LastName = new(string)
				}
				*out.LastName = string(in.String())
			}
		case "avatar_url":
			if in.IsNull() {
				in.Skip()
				out.AvatarUrl = nil
			} else {
				if out.AvatarUrl == nil {
					out.AvatarUrl = new(string)
				}
				*out.AvatarUrl = string(in.String())
			}
		case "user_link":
			if in.IsNull() {
				in.Skip()
				out.Link = nil
			} else {
				if out.Link == nil {
					out.Link = new(string)
				}
				*out.Link = string(in.String())
			}
		case "isFriend":
			if in.IsNull() {
				in.Skip()
				out.IsFriend = nil
			} else {
				if out.IsFriend == nil {
					out.IsFriend = new(bool)
				}
				*out.IsFriend = bool(in.Bool())
			}
		case "isSubscriber":
			if in.IsNull() {
				in.Skip()
				out.IsSubscriber = nil
			} else {
				if out.IsSubscriber == nil {
					out.IsSubscriber = new(bool)
				}
				*out.IsSubscriber = bool(in.Bool())
			}
		case "isSubscribed":
			if in.IsNull() {
				in.Skip()
				out.IsSubscribed = nil
			} else {
				if out.IsSubscribed == nil {
					out.IsSubscribed = new(bool)
				}
				*out.IsSubscribed = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDepecheInternalEntities1(out *jwriter.Writer, in UserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix[1:])
		if in.FirstName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FirstName))
		}
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		if in.LastName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.LastName))
		}
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		if in.AvatarUrl == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AvatarUrl))
		}
	}
	{
		const prefix string = ",\"user_link\":"
		out.RawString(prefix)
		if in.Link == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Link))
		}
	}
	{
		const prefix string = ",\"isFriend\":"
		out.RawString(prefix)
		if in.IsFriend == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsFriend))
		}
	}
	{
		const prefix string = ",\"isSubscriber\":"
		out.RawString(prefix)
		if in.IsSubscriber == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsSubscriber))
		}
	}
	{
		const prefix string = ",\"isSubscribed\":"
		out.RawString(prefix)
		if in.IsSubscribed == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsSubscribed))
		}
	}
	out.RawByte('}')
}
func easyjson5a72dc82DecodeDepecheInternalEntities2(in *jlexer.Lexer, out *CommunityInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "avatar_url":
			if in.IsNull() {
				in.Skip()
				out.AvatarUrl = nil
			} else {
				if out.AvatarUrl == nil {
					out.AvatarUrl = new(string)
				}
				*out.AvatarUrl = string(in.String())
			}
		case "link":
			if in.IsNull() {
				in.Skip()
				out.Link = nil
			} else {
				if out.Link == nil {
					out.Link = new(string)
				}
				*out.Link = string(in.String())
			}
		case "isSubscribed":
			if in.IsNull() {
				in.Skip()
				out.IsSubscribed = nil
			} else {
				if out.IsSubscribed == nil {
					out.IsSubscribed = new(bool)
				}
				*out.IsSubscribed = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeDepecheInternalEntities2(out *jwriter.Writer, in CommunityInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		if in.AvatarUrl == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AvatarUrl))
		}
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		if in.Link == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Link))
		}
	}
	{
		const prefix string = ",\"isSubscribed\":"
		out.RawString(prefix)
		if in.IsSubscribed == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsSubscribed))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommunityInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeDepecheInternalEntities2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommunityInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeDepecheInternalEntities2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommunityInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeDepecheInternalEntities2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommunityInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeDepecheInternalEntities2(l, v)
}
