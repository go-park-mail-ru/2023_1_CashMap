// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entities

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4086215fDecodeDepecheInternalEntities(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(uint)
				}
				*out.Id = uint(in.Uint())
			}
		case "sender_info":
			if in.IsNull() {
				in.Skip()
				out.SenderInfo = nil
			} else {
				if out.SenderInfo == nil {
					out.SenderInfo = new(UserInfo)
				}
				(*out.SenderInfo).UnmarshalEasyJSON(in)
			}
		case "chat_id":
			if in.IsNull() {
				in.Skip()
				out.ChatId = nil
			} else {
				if out.ChatId == nil {
					out.ChatId = new(uint)
				}
				*out.ChatId = uint(in.Uint())
			}
		case "message_content_type":
			if in.IsNull() {
				in.Skip()
				out.ContentType = nil
			} else {
				if out.ContentType == nil {
					out.ContentType = new(string)
				}
				*out.ContentType = string(in.String())
			}
		case "sticker":
			if in.IsNull() {
				in.Skip()
				out.Sticker = nil
			} else {
				if out.Sticker == nil {
					out.Sticker = new(Sticker)
				}
				(*out.Sticker).UnmarshalEasyJSON(in)
			}
		case "text_content":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		case "creation_date":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(string)
				}
				*out.CreatedAt = string(in.String())
			}
		case "change_date":
			if in.IsNull() {
				in.Skip()
				out.ChangedAt = nil
			} else {
				if out.ChangedAt == nil {
					out.ChangedAt = new(string)
				}
				*out.ChangedAt = string(in.String())
			}
		case "reply_to":
			if in.IsNull() {
				in.Skip()
				out.ReplyTo = nil
			} else {
				if out.ReplyTo == nil {
					out.ReplyTo = new(uint)
				}
				*out.ReplyTo = uint(in.Uint())
			}
		case "is_deleted":
			if in.IsNull() {
				in.Skip()
				out.IsDeleted = nil
			} else {
				if out.IsDeleted == nil {
					out.IsDeleted = new(bool)
				}
				*out.IsDeleted = bool(in.Bool())
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]string, 0, 4)
					} else {
						out.Attachments = []string{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Attachments = append(out.Attachments, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeDepecheInternalEntities(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		if in.Id == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.Id))
		}
	}
	{
		const prefix string = ",\"sender_info\":"
		out.RawString(prefix)
		if in.SenderInfo == nil {
			out.RawString("null")
		} else {
			(*in.SenderInfo).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix)
		if in.ChatId == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.ChatId))
		}
	}
	{
		const prefix string = ",\"message_content_type\":"
		out.RawString(prefix)
		if in.ContentType == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ContentType))
		}
	}
	{
		const prefix string = ",\"sticker\":"
		out.RawString(prefix)
		if in.Sticker == nil {
			out.RawString("null")
		} else {
			(*in.Sticker).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"text_content\":"
		out.RawString(prefix)
		if in.Text == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Text))
		}
	}
	{
		const prefix string = ",\"creation_date\":"
		out.RawString(prefix)
		if in.CreatedAt == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.CreatedAt))
		}
	}
	{
		const prefix string = ",\"change_date\":"
		out.RawString(prefix)
		if in.ChangedAt == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ChangedAt))
		}
	}
	{
		const prefix string = ",\"reply_to\":"
		out.RawString(prefix)
		if in.ReplyTo == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.ReplyTo))
		}
	}
	{
		const prefix string = ",\"is_deleted\":"
		out.RawString(prefix)
		if in.IsDeleted == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsDeleted))
		}
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Attachments {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeDepecheInternalEntities(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeDepecheInternalEntities(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeDepecheInternalEntities(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeDepecheInternalEntities(l, v)
}
