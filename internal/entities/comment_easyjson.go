// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entities

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE9abebc9DecodeDepecheInternalEntities(in *jlexer.Lexer, out *CommentSenderInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			if in.IsNull() {
				in.Skip()
				out.FirstName = nil
			} else {
				if out.FirstName == nil {
					out.FirstName = new(string)
				}
				*out.FirstName = string(in.String())
			}
		case "last_name":
			if in.IsNull() {
				in.Skip()
				out.LastName = nil
			} else {
				if out.LastName == nil {
					out.LastName = new(string)
				}
				*out.LastName = string(in.String())
			}
		case "user_link":
			if in.IsNull() {
				in.Skip()
				out.UserLink = nil
			} else {
				if out.UserLink == nil {
					out.UserLink = new(string)
				}
				*out.UserLink = string(in.String())
			}
		case "avatar_url":
			if in.IsNull() {
				in.Skip()
				out.AvatarUrl = nil
			} else {
				if out.AvatarUrl == nil {
					out.AvatarUrl = new(string)
				}
				*out.AvatarUrl = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeDepecheInternalEntities(out *jwriter.Writer, in CommentSenderInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix[1:])
		if in.FirstName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FirstName))
		}
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		if in.LastName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.LastName))
		}
	}
	{
		const prefix string = ",\"user_link\":"
		out.RawString(prefix)
		if in.UserLink == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.UserLink))
		}
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		if in.AvatarUrl == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AvatarUrl))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentSenderInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeDepecheInternalEntities(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentSenderInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeDepecheInternalEntities(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentSenderInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeDepecheInternalEntities(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentSenderInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeDepecheInternalEntities(l, v)
}
func easyjsonE9abebc9DecodeDepecheInternalEntities1(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(uint)
				}
				*out.ID = uint(in.Uint())
			}
		case "post_id":
			if in.IsNull() {
				in.Skip()
				out.PostID = nil
			} else {
				if out.PostID == nil {
					out.PostID = new(uint)
				}
				*out.PostID = uint(in.Uint())
			}
		case "sender_info":
			if in.IsNull() {
				in.Skip()
				out.SenderInfo = nil
			} else {
				if out.SenderInfo == nil {
					out.SenderInfo = new(CommentSenderInfo)
				}
				(*out.SenderInfo).UnmarshalEasyJSON(in)
			}
		case "reply_receiver_info":
			if in.IsNull() {
				in.Skip()
				out.ReplyReceiver = nil
			} else {
				if out.ReplyReceiver == nil {
					out.ReplyReceiver = new(CommentSenderInfo)
				}
				(*out.ReplyReceiver).UnmarshalEasyJSON(in)
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		case "creation_date":
			if in.IsNull() {
				in.Skip()
				out.CreationDate = nil
			} else {
				if out.CreationDate == nil {
					out.CreationDate = new(string)
				}
				*out.CreationDate = string(in.String())
			}
		case "change_date":
			if in.IsNull() {
				in.Skip()
				out.ChangeDate = nil
			} else {
				if out.ChangeDate == nil {
					out.ChangeDate = new(string)
				}
				*out.ChangeDate = string(in.String())
			}
		case "is_deleted":
			if in.IsNull() {
				in.Skip()
				out.IsDeleted = nil
			} else {
				if out.IsDeleted == nil {
					out.IsDeleted = new(bool)
				}
				*out.IsDeleted = bool(in.Bool())
			}
		case "is_author":
			if in.IsNull() {
				in.Skip()
				out.IsAuthor = nil
			} else {
				if out.IsAuthor == nil {
					out.IsAuthor = new(bool)
				}
				*out.IsAuthor = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeDepecheInternalEntities1(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.ID))
		}
	}
	{
		const prefix string = ",\"post_id\":"
		out.RawString(prefix)
		if in.PostID == nil {
			out.RawString("null")
		} else {
			out.Uint(uint(*in.PostID))
		}
	}
	{
		const prefix string = ",\"sender_info\":"
		out.RawString(prefix)
		if in.SenderInfo == nil {
			out.RawString("null")
		} else {
			(*in.SenderInfo).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"reply_receiver_info\":"
		out.RawString(prefix)
		if in.ReplyReceiver == nil {
			out.RawString("null")
		} else {
			(*in.ReplyReceiver).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		if in.Text == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Text))
		}
	}
	{
		const prefix string = ",\"creation_date\":"
		out.RawString(prefix)
		if in.CreationDate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.CreationDate))
		}
	}
	{
		const prefix string = ",\"change_date\":"
		out.RawString(prefix)
		if in.ChangeDate == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ChangeDate))
		}
	}
	{
		const prefix string = ",\"is_deleted\":"
		out.RawString(prefix)
		if in.IsDeleted == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsDeleted))
		}
	}
	{
		const prefix string = ",\"is_author\":"
		out.RawString(prefix)
		if in.IsAuthor == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsAuthor))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeDepecheInternalEntities1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeDepecheInternalEntities1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeDepecheInternalEntities1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeDepecheInternalEntities1(l, v)
}
