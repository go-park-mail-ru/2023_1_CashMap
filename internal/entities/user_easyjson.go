// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entities

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9e1087fdDecodeDepecheInternalEntities(in *jlexer.Lexer, out *UserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			if in.IsNull() {
				in.Skip()
				out.FirstName = nil
			} else {
				if out.FirstName == nil {
					out.FirstName = new(string)
				}
				*out.FirstName = string(in.String())
			}
		case "last_name":
			if in.IsNull() {
				in.Skip()
				out.LastName = nil
			} else {
				if out.LastName == nil {
					out.LastName = new(string)
				}
				*out.LastName = string(in.String())
			}
		case "avatar_url":
			if in.IsNull() {
				in.Skip()
				out.AvatarUrl = nil
			} else {
				if out.AvatarUrl == nil {
					out.AvatarUrl = new(string)
				}
				*out.AvatarUrl = string(in.String())
			}
		case "user_link":
			if in.IsNull() {
				in.Skip()
				out.Link = nil
			} else {
				if out.Link == nil {
					out.Link = new(string)
				}
				*out.Link = string(in.String())
			}
		case "isFriend":
			if in.IsNull() {
				in.Skip()
				out.IsFriend = nil
			} else {
				if out.IsFriend == nil {
					out.IsFriend = new(bool)
				}
				*out.IsFriend = bool(in.Bool())
			}
		case "isSubscriber":
			if in.IsNull() {
				in.Skip()
				out.IsSubscriber = nil
			} else {
				if out.IsSubscriber == nil {
					out.IsSubscriber = new(bool)
				}
				*out.IsSubscriber = bool(in.Bool())
			}
		case "isSubscribed":
			if in.IsNull() {
				in.Skip()
				out.IsSubscribed = nil
			} else {
				if out.IsSubscribed == nil {
					out.IsSubscribed = new(bool)
				}
				*out.IsSubscribed = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDepecheInternalEntities(out *jwriter.Writer, in UserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix[1:])
		if in.FirstName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FirstName))
		}
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		if in.LastName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.LastName))
		}
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		if in.AvatarUrl == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AvatarUrl))
		}
	}
	{
		const prefix string = ",\"user_link\":"
		out.RawString(prefix)
		if in.Link == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Link))
		}
	}
	{
		const prefix string = ",\"isFriend\":"
		out.RawString(prefix)
		if in.IsFriend == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsFriend))
		}
	}
	{
		const prefix string = ",\"isSubscriber\":"
		out.RawString(prefix)
		if in.IsSubscriber == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsSubscriber))
		}
	}
	{
		const prefix string = ",\"isSubscribed\":"
		out.RawString(prefix)
		if in.IsSubscribed == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsSubscribed))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDepecheInternalEntities(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDepecheInternalEntities(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDepecheInternalEntities(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDepecheInternalEntities(l, v)
}
func easyjson9e1087fdDecodeDepecheInternalEntities1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "user_link":
			out.Link = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "avatar_url":
			out.Avatar = string(in.String())
		case "sex":
			out.Sex = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "bio":
			out.Bio = string(in.String())
		case "birthday":
			out.BirthDay = string(in.String())
		case "date_joined":
			out.DateJoined = string(in.String())
		case "last_active":
			out.LastActive = string(in.String())
		case "private":
			out.Private = bool(in.Bool())
		case "avg_avatar_color":
			out.AvgAvatarColor = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDepecheInternalEntities1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"user_link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		out.String(string(in.Sex))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"bio\":"
		out.RawString(prefix)
		out.String(string(in.Bio))
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(in.BirthDay))
	}
	{
		const prefix string = ",\"date_joined\":"
		out.RawString(prefix)
		out.String(string(in.DateJoined))
	}
	{
		const prefix string = ",\"last_active\":"
		out.RawString(prefix)
		out.String(string(in.LastActive))
	}
	{
		const prefix string = ",\"private\":"
		out.RawString(prefix)
		out.Bool(bool(in.Private))
	}
	{
		const prefix string = ",\"avg_avatar_color\":"
		out.RawString(prefix)
		out.String(string(in.AvgAvatarColor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDepecheInternalEntities1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDepecheInternalEntities1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDepecheInternalEntities1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDepecheInternalEntities1(l, v)
}
