// Code generated by MockGen. DO NOT EDIT.
// Source: depeche/authorization_ms/service (interfaces: CSRFUsecase)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	authEntities "depeche/authorization_ms/authEntities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCSRFUsecase is a mock of CSRFUsecase interface.
type MockCSRFUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCSRFUsecaseMockRecorder
}

// MockCSRFUsecaseMockRecorder is the mock recorder for MockCSRFUsecase.
type MockCSRFUsecaseMockRecorder struct {
	mock *MockCSRFUsecase
}

// NewMockCSRFUsecase creates a new mock instance.
func NewMockCSRFUsecase(ctrl *gomock.Controller) *MockCSRFUsecase {
	mock := &MockCSRFUsecase{ctrl: ctrl}
	mock.recorder = &MockCSRFUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSRFUsecase) EXPECT() *MockCSRFUsecaseMockRecorder {
	return m.recorder
}

// CreateCSRFToken mocks base method.
func (m *MockCSRFUsecase) CreateCSRFToken(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCSRFToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCSRFToken indicates an expected call of CreateCSRFToken.
func (mr *MockCSRFUsecaseMockRecorder) CreateCSRFToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCSRFToken", reflect.TypeOf((*MockCSRFUsecase)(nil).CreateCSRFToken), arg0)
}

// InvalidateCSRFToken mocks base method.
func (m *MockCSRFUsecase) InvalidateCSRFToken(arg0 *authEntities.CSRF) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateCSRFToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateCSRFToken indicates an expected call of InvalidateCSRFToken.
func (mr *MockCSRFUsecaseMockRecorder) InvalidateCSRFToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateCSRFToken", reflect.TypeOf((*MockCSRFUsecase)(nil).InvalidateCSRFToken), arg0)
}

// ValidateCSRFToken mocks base method.
func (m *MockCSRFUsecase) ValidateCSRFToken(arg0 *authEntities.CSRF) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCSRFToken", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateCSRFToken indicates an expected call of ValidateCSRFToken.
func (mr *MockCSRFUsecaseMockRecorder) ValidateCSRFToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCSRFToken", reflect.TypeOf((*MockCSRFUsecase)(nil).ValidateCSRFToken), arg0)
}
