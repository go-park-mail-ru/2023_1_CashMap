// Code generated by MockGen. DO NOT EDIT.
// Source: depeche/authorization_ms/service (interfaces: Auth)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	authEntities "depeche/authorization_ms/authEntities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuth) Authenticate(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthMockRecorder) Authenticate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuth)(nil).Authenticate), arg0)
}

// CheckSession mocks base method.
func (m *MockAuth) CheckSession(arg0 string) (*authEntities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSession", arg0)
	ret0, _ := ret[0].(*authEntities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSession indicates an expected call of CheckSession.
func (mr *MockAuthMockRecorder) CheckSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSession", reflect.TypeOf((*MockAuth)(nil).CheckSession), arg0)
}

// LogOut mocks base method.
func (m *MockAuth) LogOut(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOut", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogOut indicates an expected call of LogOut.
func (mr *MockAuthMockRecorder) LogOut(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOut", reflect.TypeOf((*MockAuth)(nil).LogOut), arg0)
}
