basePath: /
definitions:
  doc.PostDelete:
    description: All post information
    properties:
      body:
        $ref: '#/definitions/dto.PostDelete'
    type: object
  doc.PostResponse:
    description: All post information
    properties:
      body:
        $ref: '#/definitions/entities.Post'
    type: object
  doc.PostsResponse:
    description: All post information
    properties:
      body:
        items:
          $ref: '#/definitions/entities.Post'
        type: array
    type: object
  dto.PostCreate:
    properties:
      author_link:
        type: string
      community_link:
        type: string
      owner_link:
        type: string
      show_author:
        type: boolean
      text:
        type: string
    type: object
  dto.PostDelete:
    properties:
      post_id:
        type: integer
    type: object
  dto.PostUpdate:
    properties:
      post_id:
        type: integer
      show_author:
        type: boolean
      text:
        type: string
    type: object
  entities.FileType:
    enum:
    - img
    - doc
    type: string
    x-enum-varnames:
    - IMAGE
    - DOCUMENT
  entities.Post:
    description: All post information
    properties:
      attachments:
        items:
          type: string
        type: array
      author_link:
        type: string
      change_date:
        type: string
      community_link:
        type: string
      creation_date:
        type: string
      id:
        type: integer
      is_deleted:
        type: boolean
      likes_amount:
        type: integer
      owner_link:
        type: string
      show_author:
        type: boolean
      text_content:
        type: string
    type: object
  entities.UserFile:
    properties:
      name:
        type: string
      type:
        $ref: '#/definitions/entities.FileType'
    type: object
host: localhost:8080
info:
  contact:
    name: CashMap team
  description: Api for Depeche social network. VK Education project. Spring, 2023
  title: Depeche API
  version: "1.0"
paths:
  /api/feed:
    get:
      description: Get users's new feed part by last post id and batch size.
      parameters:
      - description: Posts amount
        in: query
        name: batch_size
        required: true
        type: integer
      - description: Date and time of last post given. If not specified the newest
          posts will be sent
        in: query
        name: last_post_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Post'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get feed part
      tags:
      - feed
  /api/posts/community:
    get:
      description: User can get community's posts in includes batches older than specified
        in "last_post_date"
      parameters:
      - description: ID of the community on whose wall the post is located
        in: query
        name: community_link
        required: true
        type: integer
      - description: Posts amount
        in: query
        name: batch_size
        required: true
        type: integer
      - description: Date and time of last post given. If not specified the newest
          posts will be sent
        in: query
        name: last_post_date
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/doc.PostsResponse'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get post by community link
      tags:
      - Post
  /api/posts/create:
    post:
      description: User can create new post
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/doc.PostsResponse'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Create new post
      tags:
      - Post
  /api/posts/delete:
    delete:
      description: User can delete post
      parameters:
      - description: Post to delete info
        in: body
        name: request
        schema:
          $ref: '#/definitions/doc.PostDelete'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Delete post by id
      tags:
      - Post
  /api/posts/edit:
    patch:
      description: User can edit post
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Edit post by id
      tags:
      - Post
  /api/posts/id:
    get:
      description: User can get post by id, returned by server from CreatePost handler
      parameters:
      - description: Post ID
        in: query
        name: post_id
        required: true
        type: integer
      - description: Posts amount
        in: query
        name: batch_size
        required: true
        type: integer
      - description: Date and time of last post given. If not specified the newest
          posts will be sent
        in: query
        name: last_post_date
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/doc.PostResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get post by id
      tags:
      - Post
  /api/posts/profile:
    get:
      description: User can get user's posts in includes batches older than specified
        in "last_post_date"
      parameters:
      - description: ID of the user on whose wall the post is located
        in: query
        name: owner_link
        required: true
        type: integer
      - description: Posts amount
        in: query
        name: batch_size
        required: true
        type: integer
      - description: Date and time of last post given. If not specified the newest
          posts will be sent
        in: query
        name: last_post_date
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/doc.PostsResponse'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get post by user link
      tags:
      - Post
  /api/static/delete:
    delete:
      description: Users can delete file on server
      parameters:
      - description: File name
        in: query
        name: name
        required: true
        type: string
      - description: File type (
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Delete file from server
      tags:
      - static
  /api/static/download:
    get:
      description: Users can read file on server
      parameters:
      - description: File name
        in: query
        name: name
        required: true
        type: string
      - description: File type (
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Read file from server
      tags:
      - static
  /api/static/upload:
    post:
      description: Users can upload many files using multipart/form-data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.UserFile'
        "400":
          description: Bad Request
        "413":
          description: Request Entity Too Large
        "500":
          description: Internal Server Error
      summary: Load file on server
      tags:
      - static
  /auth/logout:
    post:
      description: Delete user session and invalidate session cookie
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Log out
      tags:
      - auth
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Authorize client with credentials (login and password).
      parameters:
      - description: User login
        in: body
        name: login
        required: true
        schema:
          type: string
      - description: User password
        in: body
        name: password
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Sign in
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Register client with credentials and other user info.
      parameters:
      - description: User email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: User password
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: User first name
        in: body
        name: first_name
        required: true
        schema:
          type: string
      - description: User last name
        in: body
        name: last_name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Sign up
      tags:
      - auth
swagger: "2.0"
