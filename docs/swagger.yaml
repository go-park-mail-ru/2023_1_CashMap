basePath: /
definitions:
  doc.Chat:
    description: All post information
    properties:
      chat:
        $ref: '#/definitions/entities.Chat'
    type: object
  doc.ChatCreateRequest:
    description: All post information
    properties:
      body:
        $ref: '#/definitions/dto.CreateChatDTO'
    type: object
  doc.ChatCreateResponse:
    description: All post information
    properties:
      body:
        $ref: '#/definitions/doc.Chat'
    type: object
  doc.EditProfile:
    properties:
      body:
        $ref: '#/definitions/dto.EditProfile'
    type: object
  doc.Exists:
    properties:
      has_dialog:
        type: boolean
    type: object
  doc.HasDialogResponse:
    description: All post information
    properties:
      body:
        $ref: '#/definitions/doc.Exists'
    type: object
  doc.LikePost:
    properties:
      body:
        $ref: '#/definitions/entities.LikesAmount'
    type: object
  doc.Messages:
    description: All post information
    properties:
      messages:
        items:
          $ref: '#/definitions/entities.Message'
        type: array
    type: object
  doc.MessagesListResponse:
    description: All post information
    properties:
      body:
        $ref: '#/definitions/doc.Messages'
    type: object
  doc.PostArray:
    properties:
      body:
        items:
          $ref: '#/definitions/entities.Post'
        type: array
    type: object
  doc.PostDelete:
    description: All post information
    properties:
      body:
        $ref: '#/definitions/dto.PostDelete'
    type: object
  doc.PostResponse:
    description: All post information
    properties:
      body:
        $ref: '#/definitions/entities.Post'
    type: object
  doc.PostsResponse:
    description: All post information
    properties:
      body:
        items:
          $ref: '#/definitions/entities.Post'
        type: array
    type: object
  doc.Profile:
    properties:
      body:
        $ref: '#/definitions/dto.Profile'
    type: object
  doc.ProfileArray:
    properties:
      body:
        items:
          $ref: '#/definitions/dto.Profile'
        type: array
    type: object
  doc.SendMessageResponse:
    description: All post information
    properties:
      body:
        $ref: '#/definitions/dto.NewMessage'
    type: object
  doc.SignIn:
    properties:
      body:
        $ref: '#/definitions/dto.SignIn'
    type: object
  doc.SignUp:
    properties:
      body:
        $ref: '#/definitions/dto.SignUp'
    type: object
  doc.Subscribes:
    properties:
      body:
        $ref: '#/definitions/dto.Subscribes'
    type: object
  dto.CreateChatDTO:
    properties:
      user_links:
        items:
          type: string
        type: array
    type: object
  dto.EditProfile:
    properties:
      avatar:
        type: string
      bio:
        type: string
      birthday:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      prev_pass:
        type: string
      sex:
        type: string
      status:
        type: string
      user_link:
        type: string
    type: object
  dto.GetChatsDTO:
    properties:
      batch_size:
        type: integer
      offset:
        type: integer
    type: object
  dto.LikeDTO:
    properties:
      post_id:
        type: integer
    type: object
  dto.NewMessage:
    properties:
      chat_id:
        type: integer
      message_content_type:
        type: string
      reply_to:
        type: integer
      text_content:
        type: string
    type: object
  dto.PostDelete:
    properties:
      post_id:
        type: integer
    type: object
  dto.Profile:
    properties:
      avatar:
        example: ""
        type: string
      bio:
        example: Текст с информацией о себе.
        type: string
      birthday:
        example: 30.04.2002
        type: string
      date_joined:
        example: 10.02.2023
        type: string
      first_name:
        example: Василий
        type: string
      last_active:
        example: ""
        type: string
      last_name:
        example: Петров
        type: string
      private:
        example: false
        type: boolean
      sex:
        example: male
        type: string
      status:
        example: Текст статуса.
        type: string
      user_link:
        example: id100500
        type: string
    type: object
  dto.SignIn:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.SignUp:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  dto.Subscribes:
    properties:
      user_link:
        type: string
    type: object
  entities.Chat:
    properties:
      chat_id:
        type: integer
      members:
        items:
          $ref: '#/definitions/entities.UserInfo'
        type: array
    type: object
  entities.CommunityInfo:
    properties:
      link:
        type: string
      title:
        type: string
      url:
        type: string
    type: object
  entities.FileType:
    enum:
    - img
    - doc
    type: string
    x-enum-varnames:
    - IMAGE
    - DOCUMENT
  entities.LikesAmount:
    properties:
      likes_amount:
        type: integer
    type: object
  entities.Message:
    properties:
      change_date:
        type: string
      chat_id:
        type: integer
      creation_date:
        type: string
      id:
        type: integer
      is_deleted:
        type: boolean
      message_content_type:
        type: string
      reply_to:
        type: integer
      sender_info:
        $ref: '#/definitions/entities.UserInfo'
      text_content:
        type: string
    type: object
  entities.Post:
    description: All post information
    properties:
      attachments:
        items:
          type: string
        type: array
      author_link:
        type: string
      change_date:
        type: string
      community_info:
        $ref: '#/definitions/entities.CommunityInfo'
      creation_date:
        type: string
      id:
        type: integer
      is_deleted:
        type: boolean
      is_liked:
        type: boolean
      likes_amount:
        type: integer
      owner_info:
        $ref: '#/definitions/entities.UserInfo'
      show_author:
        type: boolean
      text_content:
        type: string
    type: object
  entities.UserFile:
    properties:
      name:
        type: string
      type:
        $ref: '#/definitions/entities.FileType'
    type: object
  entities.UserInfo:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      link:
        type: string
      url:
        type: string
    type: object
  middleware.ErrorResponse:
    properties:
      message:
        example: Невалидный запрос.
        type: string
      status:
        example: 400
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    name: CashMap team
  description: Api for Depeche social network. VK Education project. Spring, 2023
  title: Depeche API
  version: "1.0"
paths:
  /api/feed:
    get:
      description: Get user's new feed part by last post id and batch size.
      parameters:
      - description: Posts amount
        in: query
        name: batch_size
        required: true
        type: integer
      - description: Date and time of last post given. If not specified the newest
          posts will be sent
        in: query
        name: last_post_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/doc.PostArray'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get feed part
      tags:
      - Feed
  /api/im/chat/check:
    get:
      description: User can check if chat with that user_link exists
      parameters:
      - description: User link
        in: query
        name: user_link
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/doc.HasDialogResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Check if dialog exists
      tags:
      - Message
  /api/im/chat/create:
    post:
      description: Create new chat with user
      parameters:
      - description: Chat info
        in: body
        name: request
        schema:
          $ref: '#/definitions/doc.ChatCreateRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/doc.ChatCreateResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Create chat
      tags:
      - Message
  /api/im/chats:
    get:
      description: Get chats list
      parameters:
      - description: Batch size
        in: query
        name: batch_size
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GetChatsDTO'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get chats
      tags:
      - Message
  /api/im/messages:
    get:
      description: Get messages batch by chatID sorted by date
      parameters:
      - description: Chat id
        in: query
        name: chat_id
        type: integer
      - description: Batch size
        in: query
        name: batch_size
        type: integer
      - description: Last post date
        in: query
        name: last_post_date
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/doc.MessagesListResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get messages
      tags:
      - Message
  /api/im/send:
    post:
      description: Add message to db and send it to listeners
      parameters:
      - description: Message info
        in: body
        name: request
        schema:
          $ref: '#/definitions/doc.SendMessageResponse'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Send message
      tags:
      - Message
  /api/posts/community:
    get:
      description: User can get community's posts in includes batches older than specified
        in "last_post_date"
      parameters:
      - description: ID of the community on whose wall the post is located
        in: query
        name: community_link
        required: true
        type: integer
      - description: Posts amount
        in: query
        name: batch_size
        required: true
        type: integer
      - description: Date and time of last post given. If not specified the newest
          posts will be sent
        in: query
        name: last_post_date
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/doc.PostsResponse'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get post by community link
      tags:
      - Post
  /api/posts/create:
    post:
      description: User can create new post
      parameters:
      - in: formData
        name: author_link
        type: string
      - in: formData
        name: community_link
        type: string
      - in: formData
        name: owner_link
        type: string
      - in: formData
        name: show_author
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/doc.PostsResponse'
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Create new post
      tags:
      - Post
  /api/posts/delete:
    delete:
      description: User can delete post
      parameters:
      - description: Post to delete info
        in: body
        name: request
        schema:
          $ref: '#/definitions/doc.PostDelete'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Delete post by id
      tags:
      - Post
  /api/posts/edit:
    patch:
      description: User can edit post
      parameters:
      - collectionFormat: csv
        description: Attachments         *[]io.ReadCloser `form:"attachments" valid:"-"`
        in: formData
        items:
          type: string
        name: attachments_to_remove
        type: array
      - in: formData
        name: post_id
        type: integer
      - in: formData
        name: show_author
        type: boolean
      - in: formData
        name: text
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Edit post by id
      tags:
      - Post
  /api/posts/id:
    get:
      description: User can get post by id, returned by server from CreatePost handler
      parameters:
      - description: Post ID
        in: query
        name: post_id
        required: true
        type: integer
      - description: Posts amount
        in: query
        name: batch_size
        required: true
        type: integer
      - description: Date and time of last post given. If not specified the newest
          posts will be sent
        in: query
        name: last_post_date
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/doc.PostResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get post by id
      tags:
      - Post
  /api/posts/like/cancel:
    post:
      description: User can deny post like if like exists
      parameters:
      - description: Post data to cancel like
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LikeDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Cancel post like
      tags:
      - Post
  /api/posts/like/set:
    post:
      description: User can like posts if like hasn't already set
      parameters:
      - description: Post data to like
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LikeDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/doc.LikePost'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Set like on post
      tags:
      - Post
  /api/posts/profile:
    get:
      description: User can get user's posts in includes batches older than specified
        in "last_post_date"
      parameters:
      - description: ID of the user on whose wall the post is located
        in: query
        name: owner_link
        required: true
        type: integer
      - description: Posts amount
        in: query
        name: batch_size
        required: true
        type: integer
      - description: Date and time of last post given. If not specified the newest
          posts will be sent
        in: query
        name: last_post_date
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/doc.PostsResponse'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get post by user link
      tags:
      - Post
  /api/static/delete:
    delete:
      description: Users can delete file on server
      parameters:
      - description: File name
        in: query
        name: name
        required: true
        type: string
      - description: File type (
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Delete file from server
      tags:
      - static
  /api/static/download:
    get:
      description: Users can read file on server
      parameters:
      - description: File name
        in: query
        name: name
        required: true
        type: string
      - description: File type (
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Read file from server
      tags:
      - static
  /api/static/upload:
    post:
      description: Users can upload many files using multipart/form-data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.UserFile'
        "400":
          description: Bad Request
        "413":
          description: Request Entity Too Large
        "500":
          description: Internal Server Error
      summary: Load file on server
      tags:
      - static
  /api/user/friends:
    get:
      description: Get friends
      parameters:
      - description: link to requested profile
        in: query
        name: link
        required: true
        type: string
      - description: amount of profiles
        in: query
        name: limit
        required: true
        type: integer
      - description: number of batch
        in: query
        name: offset
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/doc.ProfileArray'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Friends
      tags:
      - Profiles
  /api/user/profile:
    get:
      description: Get self profile
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/doc.Profile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Self
      tags:
      - Profiles
  /api/user/profile/edit:
    patch:
      consumes:
      - application/json
      description: Edit profile
      parameters:
      - description: Edited fields
        in: body
        name: request
        schema:
          $ref: '#/definitions/doc.EditProfile'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: EditProfile
      tags:
      - Profiles
  /api/user/profile/link:
    get:
      description: Get profile by link
      parameters:
      - description: link to requested profile
        in: path
        name: link
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/doc.Profile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Profile
      tags:
      - Profiles
  /api/user/reject:
    post:
      description: Reject friend request
      parameters:
      - description: Link to user to reject friend request.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/doc.Subscribes'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Reject
      tags:
      - Subscribes
  /api/user/sub:
    get:
      description: Get subscribes or subscribers for requested user
      parameters:
      - description: in/out for subscribers/subscribes
        in: query
        name: type
        required: true
        type: string
      - description: link to requested profile
        in: query
        name: link
        required: true
        type: string
      - description: amount of profiles
        in: query
        name: limit
        required: true
        type: integer
      - description: number of batch
        in: query
        name: offset
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/doc.ProfileArray'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Subscribes
      tags:
      - Profiles
    post:
      description: Subscribe to other user
      parameters:
      - description: Link to user to subscribe.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/doc.Subscribes'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Subscribe
      tags:
      - Subscribes
  /api/user/unsub:
    post:
      description: Unsubscribe from other user
      parameters:
      - description: Link to user to unsubscribe.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/doc.Subscribes'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Unsubscribe
      tags:
      - Subscribes
  /auth/logout:
    post:
      description: Delete user session and invalidate session cookie
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Log out
      tags:
      - Auth
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Authorize client with credentials (login and password).
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/doc.SignIn'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Sign in
      tags:
      - Auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Register client with credentials and other user info.
      parameters:
      - description: Required register fields
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/doc.SignUp'
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Sign up
      tags:
      - Auth
swagger: "2.0"
